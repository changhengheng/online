import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.419948d5.js";const u=JSON.parse('{"title":"设置HTTP响应报文","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter1/50.设置HTTP响应报文.md","filePath":"program/frontend/Node/chapter1/50.设置HTTP响应报文.md","lastUpdated":1697287289000}'),l={name:"program/frontend/Node/chapter1/50.设置HTTP响应报文.md"},o=p(`<h1 id="设置http响应报文" tabindex="-1">设置HTTP响应报文 <a class="header-anchor" href="#设置http响应报文" aria-label="Permalink to &quot;设置HTTP响应报文&quot;">​</a></h1><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>设置响应状态码</td><td>response.statusCode</td></tr><tr><td>设置响应状态描述</td><td>response.statusMessage （ 用的非常少 ）</td></tr><tr><td>设置响应头信息</td><td>response.setHeader(&#39;头名&#39;, &#39;头值&#39;)</td></tr><tr><td>设置响应体</td><td>response.write(&#39;xx&#39;) <br>response.end(&#39;xxx&#39;)</td></tr></tbody></table><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">write 和 end 的两种使用情况：</span></span>
<span class="line"><span style="color:#6A737D;">//1. write 和 end 的结合使用 响应体相对分散</span></span>
<span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;xx&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;xx&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;xx&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//每一个请求，在处理的时候必须要执行 end 方法的</span></span>
<span class="line"><span style="color:#6A737D;">//2. 单独使用 end 方法 响应体相对集中</span></span>
<span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;xxx&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">write 和 end 的两种使用情况：</span></span>
<span class="line"><span style="color:#6A737D;">//1. write 和 end 的结合使用 响应体相对分散</span></span>
<span class="line"><span style="color:#24292E;">response.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xx&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">response.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xx&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">response.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xx&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">response.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//每一个请求，在处理的时候必须要执行 end 方法的</span></span>
<span class="line"><span style="color:#6A737D;">//2. 单独使用 end 方法 响应体相对集中</span></span>
<span class="line"><span style="color:#24292E;">response.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.引入http模块</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">http</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2.创建服务对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 设置响应状态码</span></span>
<span class="line"><span style="color:#E1E4E8;">  response.statusCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 设置响应状态的描述</span></span>
<span class="line"><span style="color:#E1E4E8;">  response.statusMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 设置响应头</span></span>
<span class="line"><span style="color:#E1E4E8;">  response.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;content-type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;text/html;charset=utf-8&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 参数一是键名，参数二是键值</span></span>
<span class="line"><span style="color:#E1E4E8;">  response.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;server&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;nodejs&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 参数一是键名，参数二是键值</span></span>
<span class="line"><span style="color:#E1E4E8;">  response.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;myHeader&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;xaxaxax&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 自定义响应头</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 可以出现重名响应头</span></span>
<span class="line"><span style="color:#E1E4E8;">  response.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 设置响应体</span></span>
<span class="line"><span style="color:#E1E4E8;">  response.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bbbbbbbbbb&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 会和end方法设置的响应体依次合并在一起</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// write方法可以多次调用，end只能调用一次</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果使用write方法，则一般end方法不再设置响应体内容</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 必须有一个end方法,而且只能有一个end方法,多个end方法只有一个会被调用</span></span>
<span class="line"><span style="color:#E1E4E8;">  response.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 设置响应体并结束响应</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3.监听端口，启动服务</span></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">9000</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;启动成功！&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.引入http模块</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">http</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2.创建服务对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">server</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">((</span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 设置响应状态码</span></span>
<span class="line"><span style="color:#24292E;">  response.statusCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 设置响应状态的描述</span></span>
<span class="line"><span style="color:#24292E;">  response.statusMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 设置响应头</span></span>
<span class="line"><span style="color:#24292E;">  response.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;content-type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;text/html;charset=utf-8&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 参数一是键名，参数二是键值</span></span>
<span class="line"><span style="color:#24292E;">  response.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;server&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;nodejs&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 参数一是键名，参数二是键值</span></span>
<span class="line"><span style="color:#24292E;">  response.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;myHeader&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;xaxaxax&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 自定义响应头</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 可以出现重名响应头</span></span>
<span class="line"><span style="color:#24292E;">  response.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 设置响应体</span></span>
<span class="line"><span style="color:#24292E;">  response.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bbbbbbbbbb&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 会和end方法设置的响应体依次合并在一起</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// write方法可以多次调用，end只能调用一次</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果使用write方法，则一般end方法不再设置响应体内容</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 必须有一个end方法,而且只能有一个end方法,多个end方法只有一个会被调用</span></span>
<span class="line"><span style="color:#24292E;">  response.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 设置响应体并结束响应</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3.监听端口，启动服务</span></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9000</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;启动成功！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div>`,4),e=[o];function t(r,c,E,y,i,d){return n(),a("div",null,e)}const q=s(l,[["render",t]]);export{u as __pageData,q as default};
