import{_ as s,o as a,c as p,Q as n}from"./chunks/framework.419948d5.js";const h=JSON.parse('{"title":"创建应用","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Vue/Vue3/base/officialdocument/base/1.创建应用.md","filePath":"program/frontend/Vue/Vue3/base/officialdocument/base/1.创建应用.md","lastUpdated":1695182270000}'),l={name:"program/frontend/Vue/Vue3/base/officialdocument/base/1.创建应用.md"},e=n(`<h1 id="创建应用" tabindex="-1">创建应用 <a class="header-anchor" href="#创建应用" aria-label="Permalink to &quot;创建应用&quot;">​</a></h1><p>每个 Vue 应用都是通过 createApp 函数创建的一个应用实例：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1. 引入createApp 函数</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vue&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 引入根组件</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./App.vue&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 创建一个应用实例（需要传入根组件）</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createApp</span><span style="color:#E1E4E8;">(App);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 4. 挂载应用实例</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#app&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. 引入createApp 函数</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createApp } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 引入根组件</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./App.vue&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3. 创建一个应用实例（需要传入根组件）</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createApp</span><span style="color:#24292E;">(App);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 4. 挂载应用实例</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">mount</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#app&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="根组件" tabindex="-1">根组件 <a class="header-anchor" href="#根组件" aria-label="Permalink to &quot;根组件&quot;">​</a></h2><p>每个 Vue 应用都需要一个根组件，其他组件都将成为根组件的子组件。一个 Vue 应用通常是由一棵嵌套的、可重用的组件树组成。</p><h2 id="挂载应用" tabindex="-1">挂载应用 <a class="header-anchor" href="#挂载应用" aria-label="Permalink to &quot;挂载应用&quot;">​</a></h2><p>挂载是指虚拟 DOM 转换成真实 DOM 的过程。</p><p>使用 createApp() 创建应用实例之后，需要将其挂载到容器中。挂载应用使用应用实例的 mount() 方法完成。</p><p>应用挂载完成后，应用根组件的内容将会被渲染在容器元素中。</p><p>注意：</p><ul><li>容器元素本身不属于应用的一部分。</li><li>挂载操作应该在整个应用配置和资源注册完成后被调用。</li><li>不同于其他资源注册方法，mount() 的返回值是根组件实例而非应用实例。</li></ul><h2 id="根组件模板" tabindex="-1">根组件模板 <a class="header-anchor" href="#根组件模板" aria-label="Permalink to &quot;根组件模板&quot;">​</a></h2><p>根组件 App.vue 的模板是指其 <code>&lt;template&gt;&lt;/template&gt;</code> 标签，或者由其配置项 <code>template</code> 提供（Vue 组件本质上就是一个配置对象）。</p><p>根组件的模板通常是组件本身的一部分，但也可以直接通过在挂载容器内编写模板来单独提供。</p><p>当根组件没有设置 template 选项时，Vue 将自动使用容器的 innerHTML 作为模板。</p><p>使用容器 innerHTML 作为模板的场景：</p><ul><li>无构建步骤的 Vue 应用程序</li><li>SSR</li></ul><h2 id="应用配置和资源注册" tabindex="-1">应用配置和资源注册 <a class="header-anchor" href="#应用配置和资源注册" aria-label="Permalink to &quot;应用配置和资源注册&quot;">​</a></h2><p>应用配置指通过 app 应用实例提供的 .config 对象配置一些应用级的选项，比如：</p><ul><li>app.config.errorHandler：用于为应用内抛出的未捕获错误指定一个全局处理函数。</li><li>app.config.globalProperties：注册能够被应用内所有组件实例访问到的全局属性的对象。</li></ul><p>资源注册指通过 app 应用实例提供的一些方法来注册应用范围内可用的资源，比如：</p><ul><li>app.directive() ：注册全局指令</li><li>app.use() ：安装插件</li><li>app.mixin() ：应用一个全局 mixin</li><li>app.component() ：注册全局组件</li></ul><h2 id="多实例" tabindex="-1">多实例 <a class="header-anchor" href="#多实例" aria-label="Permalink to &quot;多实例&quot;">​</a></h2><p>应用实例可以同时存在多个，而且每个应用都拥有自己的用于配置和全局资源的作用域。</p><p>应用场景：如果你正在使用 Vue 来增强服务端渲染 HTML，并且只想要 Vue 去控制一个大型页面中特殊的一小部分，应避免将一个单独的 Vue 应用实例挂载到整个页面上，而是应该创建多个小的应用实例，将它们分别挂载到所需的元素上去。</p>`,25),o=[e];function t(c,r,i,u,y,d){return a(),p("div",null,o)}const m=s(l,[["render",t]]);export{h as __pageData,m as default};
