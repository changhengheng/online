import{_ as a,o as p,c as t,Q as e}from"./chunks/framework.419948d5.js";const u=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/TypeScript/base/0.介绍.md","filePath":"program/frontend/TypeScript/base/0.介绍.md","lastUpdated":1694599481000}'),r={name:"program/frontend/TypeScript/base/0.介绍.md"},i=e('<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>来源：</p><ul><li><a href="https://wangdoc.com/typescript/basic" target="_blank" rel="noreferrer">阮一峰</a></li></ul><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>TypeScript（简称 TS）是微软公司开发的一种基于 JavaScript （简称 JS）语言的编程语言。</p><p>TypeScript 可以看成是 JavaScript 的超集（superset），即它继承了后者的全部语法，所有 JavaScript 脚本都可以当作 TypeScript 脚本（但是可能会报错），此外它再增加了一些自己的语法。</p><p>TypeScript 对 JavaScript 添加的最主要部分，就是一个独立的类型系统。</p><h2 id="类型的概念" tabindex="-1">类型的概念 <a class="header-anchor" href="#类型的概念" aria-label="Permalink to &quot;类型的概念&quot;">​</a></h2><p>类型（type）指的是一组具有相同特征的值。如果两个值具有某种共同的特征，就可以说，它们属于同一种类型。</p><p>一旦确定某个值的类型，就意味着，这个值具有该类型的所有特征，可以进行该类型的所有运算。凡是适用该类型的地方，都可以使用这个值；凡是不适用该类型的地方，使用这个值都会报错。</p><p>可以这样理解，类型是人为添加的一种编程约束和用法提示。 主要目的是在软件开发过程中，为编译器和开发工具提供更多的验证和帮助，帮助提高代码质量，减少错误。</p><p>JavaScript 语言在开发阶段不会检查类型对不对，可能导致用户在使用时遇到错误。</p><p>作为比较，TypeScript 是在开发阶段报错，这样有利于提早发现错误，避免使用时报错。另一方面，函数定义里面加入类型，具有提示作用，可以告诉开发者这个函数怎么用。</p><h2 id="动态类型与静态类型" tabindex="-1">动态类型与静态类型 <a class="header-anchor" href="#动态类型与静态类型" aria-label="Permalink to &quot;动态类型与静态类型&quot;">​</a></h2><p>TypeScript 的主要功能是为 JavaScript 添加类型系统。</p><p>JavaScript 语言本身就有一套自己的类型系统，但是，JavaScript 的类型系统非常弱，而且没有使用限制，运算符可以接受各种类型的值。在语法上，JavaScript 属于动态类型语言。</p><p>动态类型造成的一些场景：</p><ul><li>无法提前（程序执行前）知道变量的类型是什么。</li><li>无法提前（程序执行前）知道对象有哪些属性（可能被删掉了）</li></ul><p>正是因为存在这些动态变化，所以 JavaScript 的类型系统是动态的，不具有很强的约束性。这对于提前发现代码错误，非常不利。</p><p>TypeScript 引入了一个更强大、更严格的类型系统，属于静态类型语言。</p><blockquote><p>静态类型和动态类型是编程语言中的两种不同的类型检查方式。静态类型是指在编译时检查变量的类型，而动态类型是指在运行时检查变量的类型。——讯飞星火</p></blockquote><h2 id="静态类型的优点" tabindex="-1">静态类型的优点 <a class="header-anchor" href="#静态类型的优点" aria-label="Permalink to &quot;静态类型的优点&quot;">​</a></h2><ul><li>有利于代码的静态分析。 不必运行代码，就可以确定变量的类型，从而推断代码有没有错误。这就叫做代码的静态分析。 这对于大型项目非常重要，单单在开发阶段运行静态检查，就可以发现很多问题，避免交付有问题的代码，大大降低了线上风险。</li><li>有利于发现错误。 由于每个值、每个变量、每个运算符都有严格的类型约束，TypeScript 就能轻松发现拼写错误、语义错误和方法调用错误，节省程序员的时间。</li><li>更好的 IDE 支持，做到语法提示和自动补全。 IDE（集成开发环境，比如 VSCode）一般都会利用类型信息，提供语法提示功能（编辑器自动提示函数用法、参数等）和自动补全功能（只键入一部分的变量名或函数名，编辑器补全后面的部分）。</li><li>提供了代码文档。 类型信息可以部分替代代码文档，解释应该如何使用这些代码，熟练的开发者往往只看类型，就能大致推断代码的作用。借助类型信息，很多工具能够直接生成文档。</li><li>有助于代码重构。 修改他人的 JavaScript 代码，往往非常痛苦，项目越大越痛苦，因为不确定修改后是否会影响到其他部分的代码。 类型信息大大减轻了重构的成本。一般来说，只要函数或对象的参数和返回值保持类型不变，就能基本确定，重构后的代码也能正常运行。如果还有配套的单元测试，就完全可以放心重构。越是大型的、多人合作的项目，类型信息能够提供的帮助越大。</li></ul><p>综上所述，TypeScript 有助于提高代码质量，保证代码安全，更适合用在大型的企业级项目。这就是为什么大量 JavaScript 项目转成 TypeScript 的原因。</p><h2 id="静态类型的缺点" tabindex="-1">静态类型的缺点 <a class="header-anchor" href="#静态类型的缺点" aria-label="Permalink to &quot;静态类型的缺点&quot;">​</a></h2><ul><li>丧失了动态类型的代码灵活性。 动态类型有非常高的灵活性，给予程序员很大的自由，静态类型将这些灵活性都剥夺了。</li><li>增加了编程工作量。 有了类型之后，程序员不仅需要编写功能，还需要编写类型声明，确保类型正确。这增加了不少工作量，有时会显著拖长项目的开发时间。</li><li>更高的学习成本。 类型系统通常比较复杂，要学习的东西更多，要求开发者付出更高的学习成本。</li><li>引入了独立的编译步骤。 原生的 JavaScript 代码，可以直接在 JavaScript 引擎运行。添加类型系统以后，就多出了一个单独的编译步骤，检查类型是否正确，并将 TypeScript 代码转成 JavaScript 代码，这样才能运行。</li><li>兼容性问题。 TypeScript 依赖 JavaScript 生态，需要用到很多外部模块。但是，过去大部分 JavaScript 项目都没有做 TypeScript 适配，虽然可以自己动手做适配，不过使用时难免还是会有一些兼容性问题。</li></ul><p>总的来说，这些缺点使得 TypeScript 不一定适合那些小型的、短期的个人项目。</p><h2 id="如何学习" tabindex="-1">如何学习 <a class="header-anchor" href="#如何学习" aria-label="Permalink to &quot;如何学习&quot;">​</a></h2><p>学习 TypeScript，必须先了解 JavaScript 的语法。因为真正的实际功能都是 JavaScript 引擎完成的，TypeScript 只是添加了一个类型系统。</p><p>本书假定读者已经了解 JavaScript 语言，就不再介绍它的语法了，只介绍 TypeScript 引入的新语法，主要是类型系统。</p>',30),c=[i];function l(o,n,S,s,h,d){return p(),t("div",null,c)}const T=a(r,[["render",l]]);export{u as __pageData,T as default};
