import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.19358895.js";const u=JSON.parse('{"title":"文件读取","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter1/19.文件读取.md","filePath":"program/frontend/Node/chapter1/19.文件读取.md","lastUpdated":1697287289000}'),o={name:"program/frontend/Node/chapter1/19.文件读取.md"},p=l(`<h1 id="文件读取" tabindex="-1">文件读取 <a class="header-anchor" href="#文件读取" aria-label="Permalink to &quot;文件读取&quot;">​</a></h1><p>文件读取顾名思义，就是通过程序从文件中取出其中的数据</p><blockquote><p>越来越感觉编程和普通生活事物没有什么区别了，到这个层面就算是真正的理解了</p></blockquote><h2 id="readfile-异步读取" tabindex="-1">readFile 异步读取 <a class="header-anchor" href="#readfile-异步读取" aria-label="Permalink to &quot;readFile 异步读取&quot;">​</a></h2><p><code>fs.readFile(path[, options], callback) </code></p><ul><li>path 文件路径</li><li>options 选项配置</li><li>callback 回调函数</li></ul><p>返回值： undefined</p><h2 id="readfilesync-同步读取" tabindex="-1">readFileSync 同步读取 <a class="header-anchor" href="#readfilesync-同步读取" aria-label="Permalink to &quot;readFileSync 同步读取&quot;">​</a></h2><p><code>fs.readFileSync(path[, options])</code></p><ul><li><p>path 文件路径</p></li><li><p>options 选项配置</p></li></ul><p>返回值：string | Buffer</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.引入fs</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 2.异步读取</span></span>
<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/hello.txt&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 文件读取成功之后，回调函数会被调用。默认参数是err和data，err是错误信息，data是文件内容，是一个buffer</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;读取失败&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span><span style="color:#6A737D;">// 将buffer以utf-8编码格式转为字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 3.同步读取</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/hello.txt&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.引入fs</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 2.异步读取</span></span>
<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/hello.txt&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 文件读取成功之后，回调函数会被调用。默认参数是err和data，err是错误信息，data是文件内容，是一个buffer</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;读取失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span><span style="color:#6A737D;">// 将buffer以utf-8编码格式转为字符串</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 3.同步读取</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/hello.txt&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span></code></pre></div><p>使用代码读取文件，主要是为了自动化，不用人去点，而是通过脚本去做。比如请求网络资源，通过程序读取，然后返回给浏览器，用户就能看了，不需要人去点。</p>`,13),e=[p];function t(r,c,E,y,i,d){return a(),n("div",null,e)}const f=s(o,[["render",t]]);export{u as __pageData,f as default};
