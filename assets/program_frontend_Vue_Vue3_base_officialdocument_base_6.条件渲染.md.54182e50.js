import{_ as e,o as a,c as t,Q as o}from"./chunks/framework.19358895.js";const _=JSON.parse('{"title":"条件渲染","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Vue/Vue3/base/officialdocument/base/6.条件渲染.md","filePath":"program/frontend/Vue/Vue3/base/officialdocument/base/6.条件渲染.md","lastUpdated":1697697620000}'),i={name:"program/frontend/Vue/Vue3/base/officialdocument/base/6.条件渲染.md"},l=o('<h1 id="条件渲染" tabindex="-1">条件渲染 <a class="header-anchor" href="#条件渲染" aria-label="Permalink to &quot;条件渲染&quot;">​</a></h1><h2 id="v-if" tabindex="-1">v-if <a class="header-anchor" href="#v-if" aria-label="Permalink to &quot;v-if&quot;">​</a></h2><p>v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染。</p><p>你也可以使用 v-else 或 v-else-if 为 v-if 添加一个“else 区块”或“else-if 区块”。</p><ul><li>一个 v-else 元素或者 v-else-if 元素必须跟在一个 v-if 或者 v-else-if 元素后面，否则它将不会被识别</li><li>v-else-if 可以连续多次重复使用</li></ul><h3 id="template-上的-v-if" tabindex="-1"><code>&lt;template&gt;</code> 上的 v-if <a class="header-anchor" href="#template-上的-v-if" aria-label="Permalink to &quot;`&lt;template&gt;` 上的 v-if&quot;">​</a></h3><p>v-if 是一个指令，必须依附于某个元素。如果想切换的不止一个元素，可以使用一个 <code>&lt;template&gt;</code> 元素包裹住想要切换的元素，并在 <code>&lt;template&gt;</code> 元素上应用 v-if 指令。</p><p><code>&lt;template&gt;</code> 只是一个不可见的包装器元素，不会在视图中进行渲染。</p><p>v-else 和 v-else-if 也可以在 <code>&lt;template&gt;</code> 上使用。</p><h2 id="v-show" tabindex="-1">v-show <a class="header-anchor" href="#v-show" aria-label="Permalink to &quot;v-show&quot;">​</a></h2><p>v-show 也可以用来按条件控制某一元素的显隐。同 v-if 的基本用法一致。</p><p>不同之处在于 v-show 会在 DOM 渲染中保留该元素；v-show 实质上只是切换了该元素上名为 display 的 CSS 属性。</p><p>v-show 不支持在 <code>&lt;template&gt;</code> 元素上使用，也不能和 v-else 搭配使用。</p><h2 id="v-if-vs-v-show" tabindex="-1">v-if vs. v-show <a class="header-anchor" href="#v-if-vs-v-show" aria-label="Permalink to &quot;v-if vs. v-show&quot;">​</a></h2><p>v-if 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。</p><p>v-if 也是惰性的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。</p><p>v-show 元素无论初始条件如何，始终会被渲染，只有 CSS display 属性会被切换。</p><p>总的来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 v-show 较好；如果在运行时绑定条件很少改变，则 v-if 会更合适。</p><h2 id="v-if-和-v-for" tabindex="-1">v-if 和 v-for <a class="header-anchor" href="#v-if-和-v-for" aria-label="Permalink to &quot;v-if 和 v-for&quot;">​</a></h2><p>同时使用 v-if 和 v-for 是不推荐的，因为这样二者的优先级不明显。</p><p>当 v-if 和 v-for 同时存在于一个元素上的时候，v-if 会首先被执行。</p><blockquote><p>在 Vue2 中，v-for 和 v-if 同时使用时，v-for 优先级更高。</p></blockquote>',22),s=[l];function f(v,r,p,d,c,h){return a(),t("div",null,s)}const u=e(i,[["render",f]]);export{_ as __pageData,u as default};
