import{_ as e,o as a,c as t,Q as i}from"./chunks/framework.419948d5.js";const o="/assets/render-pipeline.03805016.03805016.png",M=JSON.parse('{"title":"渲染机制（未完成）","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Vue/Vue3/base/officialdocument/进阶主题/渲染机制.md","filePath":"program/frontend/Vue/Vue3/base/officialdocument/进阶主题/渲染机制.md","lastUpdated":1695182270000}'),p={name:"program/frontend/Vue/Vue3/base/officialdocument/进阶主题/渲染机制.md"},r=i('<h1 id="渲染机制-未完成" tabindex="-1">渲染机制（未完成） <a class="header-anchor" href="#渲染机制-未完成" aria-label="Permalink to &quot;渲染机制（未完成）&quot;">​</a></h1><p>问题：</p><ul><li>Vue 是如何将一份模板转换为真实的 DOM 节点的</li><li>Vue 是如何高效地更新这些节点的</li></ul><h2 id="虚拟-dom" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom" aria-label="Permalink to &quot;虚拟 DOM&quot;">​</a></h2><p>虚拟 DOM (Virtual DOM，简称 VDOM) 是一种编程概念，意为将目标所需的 UI 通过数据结构“虚拟”地表示出来，保存在内存中，然后将真实的 DOM 与之保持同步。</p><p>与其说虚拟 DOM 是一种具体的技术，不如说是一种模式，所以并没有一个标准的实现。</p><p>虚拟 DOM 是一个纯 JavaScript 的对象 (一个“虚拟节点”)，它包含我们创建实际元素所需的所有信息。</p><p>一个运行时渲染器将会遍历整个虚拟 DOM 树，并据此构建真实的 DOM 树。这个过程被称为挂载 (mount)。</p><p>如果我们有两份虚拟 DOM 树，渲染器将会有比较地遍历它们，找出它们之间的区别，并应用这其中的变化到真实的 DOM 上。这个过程被称为更新 (patch)，又被称为“比对”(diffing) 或“协调”(reconciliation)。</p><p>虚拟 DOM 带来的主要收益是它让开发者能够灵活、声明式地创建、检查和组合所需 UI 的结构，同时只需把具体的 DOM 操作留给渲染器去处理。</p><h2 id="渲染管线" tabindex="-1">渲染管线 <a class="header-anchor" href="#渲染管线" aria-label="Permalink to &quot;渲染管线&quot;">​</a></h2><p>渲染管线是指通过一系列处理，把虚拟 DOM 转换成人可以看到的真实 DOM 节点这一过程。</p><p><img src="'+o+'" alt=""></p><p>从高层面的视角看，Vue 组件挂载时会发生如下几件事：</p><ul><li><p>编译：Vue 模板被编译为渲染函数：即用来返回虚拟 DOM 树的函数。这一步骤可以通过构建步骤提前完成，也可以通过使用运行时编译器即时完成。</p></li><li><p>挂载：运行时渲染器调用渲染函数，遍历返回的虚拟 DOM 树，并基于它创建实际的 DOM 节点。这一步会作为响应式副作用执行，因此它会追踪其中所用到的所有响应式依赖。</p></li><li><p>更新：当一个依赖发生变化后，副作用会重新运行，这时候会创建一个更新后的虚拟 DOM 树。运行时渲染器遍历这棵新树，将它与旧树进行比较，然后将必要的更新应用到真实 DOM 上去。</p></li></ul><h2 id="模板-vs-渲染函数" tabindex="-1">模板 vs. 渲染函数 <a class="header-anchor" href="#模板-vs-渲染函数" aria-label="Permalink to &quot;模板 vs. 渲染函数&quot;">​</a></h2><p>Vue 模板会被预编译成虚拟 DOM 渲染函数。Vue 也提供了 API 使我们可以不使用模板编译，直接手写渲染函数。在处理高度动态的逻辑时，渲染函数相比于模板更加灵活，因为你可以完全地使用 JavaScript 来构造你想要的 vnode。</p><p>那么为什么 Vue 默认推荐使用模板呢？有以下几点原因：</p><ol><li><p>模板更贴近实际的 HTML。这使得我们能够更方便地重用一些已有的 HTML 代码片段，能够带来更好的可访问性体验、能更方便地使用 CSS 应用样式，并且更容易使设计师理解和修改。</p></li><li><p>由于其确定的语法，更容易对模板做静态分析。这使得 Vue 的模板编译器能够应用许多编译时优化来提升虚拟 DOM 的性能表现 (下面我们将展开讨论)。</p></li></ol><p>在实践中，模板对大多数的应用场景都是够用且高效的。渲染函数一般只会在需要处理高度动态渲染逻辑的可重用组件中使用。想了解渲染函数的更多使用细节可以去到渲染函数 &amp; JSX 章节继续阅读。</p>',20),l=[r];function n(s,c,d,u,_,h){return a(),t("div",null,l)}const m=e(p,[["render",n]]);export{M as __pageData,m as default};
