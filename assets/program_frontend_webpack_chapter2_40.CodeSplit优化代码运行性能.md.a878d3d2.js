import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.19358895.js";const h=JSON.parse('{"title":"CodeSplit优化代码运行性能","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/webpack/chapter2/40.CodeSplit优化代码运行性能.md","filePath":"program/frontend/webpack/chapter2/40.CodeSplit优化代码运行性能.md","lastUpdated":1694563493000}'),l={name:"program/frontend/webpack/chapter2/40.CodeSplit优化代码运行性能.md"},o=p(`<h1 id="codesplit优化代码运行性能" tabindex="-1">CodeSplit优化代码运行性能 <a class="header-anchor" href="#codesplit优化代码运行性能" aria-label="Permalink to &quot;CodeSplit优化代码运行性能&quot;">​</a></h1><h2 id="为什么" tabindex="-1">为什么 <a class="header-anchor" href="#为什么" aria-label="Permalink to &quot;为什么&quot;">​</a></h2><p>打包代码时会将所有 js 文件打包到一个文件中，体积太大了。我们如果只要渲染首页，就应该只加载首页的 js 文件，其他文件不应该加载，否则速度会很慢。</p><p>所以我们需要将打包生成的文件进行代码分割，生成多个 js 文件，渲染哪个页面就只加载某个 js 文件，这样加载的资源就少，速度就更快。</p><h2 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h2><p>代码分割（Code Split）主要做了两件事：</p><ol><li>分割文件：将打包生成的文件进行分割，生成多个 js 文件。</li><li>按需加载：需要哪个文件就加载哪个文件。</li></ol><h2 id="怎么用" tabindex="-1">怎么用 <a class="header-anchor" href="#怎么用" aria-label="Permalink to &quot;怎么用&quot;">​</a></h2><p>代码分割实现方式有不同的方式，为了更加方便体现它们之间的差异，我们会分别创建新的文件来演示</p><blockquote><p>不同实现方式分别创建不同的项目来练习，基础配置都重新写一遍</p></blockquote><h3 id="_1-多入口" tabindex="-1">1. 多入口 <a class="header-anchor" href="#_1-多入口" aria-label="Permalink to &quot;1. 多入口&quot;">​</a></h3><ol><li><p>文件目录</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">├── public</span></span>
<span class="line"><span style="color:#e1e4e8;">|   └── index.html</span></span>
<span class="line"><span style="color:#e1e4e8;">├── src</span></span>
<span class="line"><span style="color:#e1e4e8;">|   ├── app.js</span></span>
<span class="line"><span style="color:#e1e4e8;">|   └── main.js</span></span>
<span class="line"><span style="color:#e1e4e8;">├── package.json</span></span>
<span class="line"><span style="color:#e1e4e8;">└── webpack.config.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">├── public</span></span>
<span class="line"><span style="color:#24292e;">|   └── index.html</span></span>
<span class="line"><span style="color:#24292e;">├── src</span></span>
<span class="line"><span style="color:#24292e;">|   ├── app.js</span></span>
<span class="line"><span style="color:#24292e;">|   └── main.js</span></span>
<span class="line"><span style="color:#24292e;">├── package.json</span></span>
<span class="line"><span style="color:#24292e;">└── webpack.config.js</span></span></code></pre></div></li><li><p>下载包</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm i webpack webpack-cli html-webpack-plugin -D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm i webpack webpack-cli html-webpack-plugin -D</span></span></code></pre></div></li><li><p>新建文件</p><p>内容无关紧要，主要观察打包输出的结果</p><ul><li><p>app.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello app&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello app&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div></li><li><p>main.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello main&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello main&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div></li></ul></li><li><p>配置</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;html-webpack-plugin&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 只有一个入口文件，称为单入口</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// entry: &#39;./src/main.js&#39;, // 单个入口写成字符串，多个入口写成对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 有多个入口文件，称为多入口</span></span>
<span class="line"><span style="color:#E1E4E8;">        entry: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            main: </span><span style="color:#9ECBFF;">&quot;./src/main.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            app: </span><span style="color:#9ECBFF;">&quot;./src/app.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;./dist&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span></span>
<span class="line"><span style="color:#E1E4E8;">            filename: </span><span style="color:#9ECBFF;">&quot;js/[name].js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            clear: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 以index.html为模板</span></span>
<span class="line"><span style="color:#E1E4E8;">                template: </span><span style="color:#9ECBFF;">&quot;./public/index.html&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            }),</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">        mode: </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HtmlWebpackPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;html-webpack-plugin&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 只有一个入口文件，称为单入口</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// entry: &#39;./src/main.js&#39;, // 单个入口写成字符串，多个入口写成对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 有多个入口文件，称为多入口</span></span>
<span class="line"><span style="color:#24292E;">        entry: {</span></span>
<span class="line"><span style="color:#24292E;">            main: </span><span style="color:#032F62;">&quot;./src/main.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            app: </span><span style="color:#032F62;">&quot;./src/app.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        output: {</span></span>
<span class="line"><span style="color:#24292E;">            path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;./dist&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span></span>
<span class="line"><span style="color:#24292E;">            filename: </span><span style="color:#032F62;">&quot;js/[name].js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            clear: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        plugins: [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HtmlWebpackPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 以index.html为模板</span></span>
<span class="line"><span style="color:#24292E;">                template: </span><span style="color:#032F62;">&quot;./public/index.html&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            }),</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">        mode: </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span></code></pre></div></li><li><p>运行指令</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npx webpack</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npx webpack</span></span></code></pre></div><p>此时在 dist 目录我们能看到输出了两个 js 文件。</p><p>总结：配置了几个入口，至少输出几个 js 文件。</p><blockquote><p>开发或生产都可以配置</p></blockquote></li></ol><h3 id="_2-提取重复代码" tabindex="-1">2. 提取重复代码 <a class="header-anchor" href="#_2-提取重复代码" aria-label="Permalink to &quot;2. 提取重复代码&quot;">​</a></h3><p>如果多入口文件中都引用了同一份代码，我们不希望这份代码被打包到两个文件中，导致代码重复，体积更大。</p><p>我们需要提取多入口的重复代码，只打包生成一个 js 文件，其他文件引用它就好。</p><ol><li><p>修改文件</p><ul><li><p>app.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sum</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./math&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello app&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    sum</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./math&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello app&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">));</span></span></code></pre></div></li><li><p>main.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sum</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./math&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello main&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    sum</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./math&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello main&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span></span></code></pre></div></li><li><p>math.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">p</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> c, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">p</span><span style="color:#24292E;">, </span><span style="color:#E36209;">c</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> c, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span></code></pre></div></li></ul></li><li><p>修改配置文件</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;html-webpack-plugin&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 单入口</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// entry: &#39;./src/main.js&#39;,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 多入口</span></span>
<span class="line"><span style="color:#E1E4E8;">        entry: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            main: </span><span style="color:#9ECBFF;">&quot;./src/main.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            app: </span><span style="color:#9ECBFF;">&quot;./src/app.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;./dist&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span></span>
<span class="line"><span style="color:#E1E4E8;">            filename: </span><span style="color:#9ECBFF;">&quot;js/[name].js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            clean: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">                template: </span><span style="color:#9ECBFF;">&quot;./public/index.html&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            }),</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">        mode: </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        optimization: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 代码分割配置</span></span>
<span class="line"><span style="color:#E1E4E8;">            splitChunks: { </span><span style="color:#6A737D;">// 分割chunk</span></span>
<span class="line"><span style="color:#E1E4E8;">                chunks: </span><span style="color:#9ECBFF;">&quot;all&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 对所有chunk（在这里就是打包后生成的main.js和app.js）都进行分割</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 以下是默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// minSize: 20000, // 分割代码最小的大小</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// maxInitialRequests: 30, // 入口js文件最大并行请求数量，超过30就不会分割了（并行对服务器压力大，需要取舍）</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// cacheGroups: { // 组，哪些模块要打包到一个组，默认有defaultVendors和default两个组。组用来实现分割不同chunk时对应不同的配置，不在任何一个组中的配置（上面的）是公共基础配置，组的配置的优先级高于公共基础配置，但组的配置只对当前组生效。公共基础配置里没有写的配置项，由组的配置进行补充；公共基础配置里写过的配置，会被组的配置的同名配置项覆盖。</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//   defaultVendors: { // 组名</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//     test: /[\\\\/]node_modules[\\\\/]/, // 需要打包到一起的模块</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//     priority: -10, // 权重（越大越高）</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//   },</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//   default: { // 其他没有写的配置会使用上面的默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//     minChunks: 2, // 这里的minChunks权重更大</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//     priority: -20,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//     reuseExistingChunk: true,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//   },</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// },</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 修改配置</span></span>
<span class="line"><span style="color:#E1E4E8;">                cacheGroups: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 组，哪些模块要打包到一个组</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// defaultVendors: { // 组名</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">//   test: /[\\\\/]node_modules[\\\\/]/, // 需要打包到一起的模块</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">//   priority: -10, // 权重（越大越高）</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">//   reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// },</span></span>
<span class="line"><span style="color:#E1E4E8;">                    default: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 其他没有写的配置会使用上面的默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">                        minSize: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 我们定义的文件体积太小了，所以要改打包的最小文件体积</span></span>
<span class="line"><span style="color:#E1E4E8;">                        minChunks: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        priority: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        reuseExistingChunk: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    },</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HtmlWebpackPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;html-webpack-plugin&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 单入口</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// entry: &#39;./src/main.js&#39;,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 多入口</span></span>
<span class="line"><span style="color:#24292E;">        entry: {</span></span>
<span class="line"><span style="color:#24292E;">            main: </span><span style="color:#032F62;">&quot;./src/main.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            app: </span><span style="color:#032F62;">&quot;./src/app.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        output: {</span></span>
<span class="line"><span style="color:#24292E;">            path: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;./dist&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span></span>
<span class="line"><span style="color:#24292E;">            filename: </span><span style="color:#032F62;">&quot;js/[name].js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            clean: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        plugins: [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HtmlWebpackPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">                template: </span><span style="color:#032F62;">&quot;./public/index.html&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            }),</span></span>
<span class="line"><span style="color:#24292E;">        ],</span></span>
<span class="line"><span style="color:#24292E;">        mode: </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        optimization: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 代码分割配置</span></span>
<span class="line"><span style="color:#24292E;">            splitChunks: { </span><span style="color:#6A737D;">// 分割chunk</span></span>
<span class="line"><span style="color:#24292E;">                chunks: </span><span style="color:#032F62;">&quot;all&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 对所有chunk（在这里就是打包后生成的main.js和app.js）都进行分割</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 以下是默认值</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// minSize: 20000, // 分割代码最小的大小</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// maxInitialRequests: 30, // 入口js文件最大并行请求数量，超过30就不会分割了（并行对服务器压力大，需要取舍）</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// cacheGroups: { // 组，哪些模块要打包到一个组，默认有defaultVendors和default两个组。组用来实现分割不同chunk时对应不同的配置，不在任何一个组中的配置（上面的）是公共基础配置，组的配置的优先级高于公共基础配置，但组的配置只对当前组生效。公共基础配置里没有写的配置项，由组的配置进行补充；公共基础配置里写过的配置，会被组的配置的同名配置项覆盖。</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//   defaultVendors: { // 组名</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//     test: /[\\\\/]node_modules[\\\\/]/, // 需要打包到一起的模块</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//     priority: -10, // 权重（越大越高）</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//   },</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//   default: { // 其他没有写的配置会使用上面的默认值</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//     minChunks: 2, // 这里的minChunks权重更大</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//     priority: -20,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//     reuseExistingChunk: true,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//   },</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// },</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 修改配置</span></span>
<span class="line"><span style="color:#24292E;">                cacheGroups: {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 组，哪些模块要打包到一个组</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// defaultVendors: { // 组名</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//   test: /[\\\\/]node_modules[\\\\/]/, // 需要打包到一起的模块</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//   priority: -10, // 权重（越大越高）</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//   reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// },</span></span>
<span class="line"><span style="color:#24292E;">                    default: {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 其他没有写的配置会使用上面的默认值</span></span>
<span class="line"><span style="color:#24292E;">                        minSize: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 我们定义的文件体积太小了，所以要改打包的最小文件体积</span></span>
<span class="line"><span style="color:#24292E;">                        minChunks: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                        priority: </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                        reuseExistingChunk: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                    },</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span></code></pre></div><blockquote><p>多入口一定会有多输出，要不要输出更多的文件取决于代码压缩配置：比如抽离复用的模块为单独的js文件，就可以配置代码分割——每个chunk单独打包，除此之外复用的部分也单独打包一个js文件，这样就产生了3个js文件</p></blockquote></li><li><p>运行指令</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npx webpack</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npx webpack</span></span></code></pre></div><p>此时我们会发现生成 3 个 js 文件，其中有一个就是提取的公共模块。</p></li></ol><h3 id="_3-按需加载-动态导入" tabindex="-1">3. 按需加载，动态导入 <a class="header-anchor" href="#_3-按需加载-动态导入" aria-label="Permalink to &quot;3. 按需加载，动态导入&quot;">​</a></h3><p>想要实现按需加载，动态导入模块。还需要额外配置：</p><blockquote><p>要执行哪个再加载哪个文件，不执行暂时不加载，就是按需加载；比如页面一打开有一些用不上的资源，先不加载，首屏打开速度就快很多。 按需加载使用import动态导入实现：动态导入语法会将动态导入的文件代码分割（拆分成一个单独的模块，通常是一个js文件，打包完可以看到），单独加载，在需要使用的时候自动加载（可以通过network查看加载的模块数量）。我们要做的就是使用它来实现模块的动态加载。</p></blockquote><ol><li><p>修改文件</p><ul><li><p>main.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello main&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;btn&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">onclick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 动态导入 --&gt; 实现按需加载</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 即使只被引用了一次，也会代码分割</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./math.js&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(({</span></span>
<span class="line"><span style="color:#E1E4E8;">        sum</span></span>
<span class="line"><span style="color:#E1E4E8;">    }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello main&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;btn&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">onclick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 动态导入 --&gt; 实现按需加载</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 即使只被引用了一次，也会代码分割</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./math.js&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(({</span></span>
<span class="line"><span style="color:#24292E;">        sum</span></span>
<span class="line"><span style="color:#24292E;">    }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></li><li><p>app.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello app&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello app&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div></li><li><p>public/index.html</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;hello webpack&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;btn&quot;</span><span style="color:#E1E4E8;">&gt;计算&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;hello webpack&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;btn&quot;</span><span style="color:#24292E;">&gt;计算&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></li></ul></li><li><p>运行指令</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npx webpack</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npx webpack</span></span></code></pre></div></li></ol><p>我们可以发现，一旦通过 import 动态导入语法导入模块，模块就被代码分割，同时也能按需加载了。</p>`,21),e=[o];function c(t,r,E,y,i,u){return n(),a("div",null,e)}const F=s(l,[["render",c]]);export{h as __pageData,F as default};
