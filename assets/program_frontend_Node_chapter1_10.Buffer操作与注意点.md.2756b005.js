import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.19358895.js";const u=JSON.parse('{"title":"Buffer操作与注意点","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter1/10.Buffer操作与注意点.md","filePath":"program/frontend/Node/chapter1/10.Buffer操作与注意点.md","lastUpdated":1697287289000}'),o={name:"program/frontend/Node/chapter1/10.Buffer操作与注意点.md"},p=l(`<h1 id="buffer操作与注意点" tabindex="-1">Buffer操作与注意点 <a class="header-anchor" href="#buffer操作与注意点" aria-label="Permalink to &quot;Buffer操作与注意点&quot;">​</a></h1><h2 id="buffer与字符串的转换" tabindex="-1">Buffer与字符串的转换 <a class="header-anchor" href="#buffer与字符串的转换" aria-label="Permalink to &quot;Buffer与字符串的转换&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> buf4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">68</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">65</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// buffer转字符串，默认使用utf-8编码格式</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(buf4.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> buf4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">68</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">65</span><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// buffer转字符串，默认使用utf-8编码格式</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(buf4.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span></code></pre></div><h2 id="读写操作" tabindex="-1">读写操作 <a class="header-anchor" href="#读写操作" aria-label="Permalink to &quot;读写操作&quot;">​</a></h2><p>Buffer是一种类似于数组的元素，可以通过中括号<code>[]</code>下标的方式进行操作：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> buf4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">68</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">65</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// 读写操作</span></span>
<span class="line"><span style="color:#6A737D;">// 读</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;"> (buf4[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 这里的toString用来进行进制转换，二进制默认是8位，打印1000100为7为是因为省略了第一个0</span></span>
<span class="line"><span style="color:#6A737D;">// 写</span></span>
<span class="line"><span style="color:#E1E4E8;">buf4[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;"> (buf4[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">// 232</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> buf4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">68</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">65</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// 读写操作</span></span>
<span class="line"><span style="color:#6A737D;">// 读</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;"> (buf4[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 这里的toString用来进行进制转换，二进制默认是8位，打印1000100为7为是因为省略了第一个0</span></span>
<span class="line"><span style="color:#6A737D;">// 写</span></span>
<span class="line"><span style="color:#24292E;">buf4[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;"> (buf4[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 232</span></span></code></pre></div><h2 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h2><h3 id="溢出" tabindex="-1">溢出 <a class="header-anchor" href="#溢出" aria-label="Permalink to &quot;溢出&quot;">​</a></h3><p>8个2进制位所能表示的最大数字是255，大于255会溢出。溢出时对Buffer数据进行操作，内部会丢掉高于8位的数字</p><h3 id="中文" tabindex="-1">中文 <a class="header-anchor" href="#中文" aria-label="Permalink to &quot;中文&quot;">​</a></h3><p>中文用utf-8编码，utf-8中，一个中文占3个字节，所以一个buffer长度等于中文字数*3</p>`,11),e=[p];function t(r,c,y,E,i,f){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
