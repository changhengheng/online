import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.19358895.js";const h=JSON.parse('{"title":"Eslint 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/webpack/chapter1/17.Eslint介绍.md","filePath":"program/frontend/webpack/chapter1/17.Eslint介绍.md","lastUpdated":1694391214000}'),p={name:"program/frontend/webpack/chapter1/17.Eslint介绍.md"},e=l(`<h1 id="eslint-介绍" tabindex="-1">Eslint 介绍 <a class="header-anchor" href="#eslint-介绍" aria-label="Permalink to &quot;Eslint 介绍&quot;">​</a></h1><p>可组装的 JavaScript 和 JSX 语法检查工具。</p><p>这句话意思就是：它是用来检测 js 和 jsx 语法的工具，并且可以配置各项功能</p><p>我们使用 Eslint，关键是写 Eslint 配置文件，里面写上各种 rules 规则，将来运行 Eslint 时就会以写的规则对代码进行检查</p><blockquote><p>facebook 投资了 Eslint，而react是facebook开发的，因此Eslint天然支持JSX语法检查，而Vue则需要配置才行。</p></blockquote><blockquote><p>学 Eslint 主要就是学配置各种规则</p></blockquote><h2 id="_1-配置文件" tabindex="-1">1. 配置文件 <a class="header-anchor" href="#_1-配置文件" aria-label="Permalink to &quot;1. 配置文件&quot;">​</a></h2><p><code>.eslintrc.*</code>：Eslint 的配置文件</p><p>新建配置文件，位于项目根目录，有很多种写法：</p><ul><li><p><code>.eslintrc</code></p></li><li><p><code>.eslintrc.js</code></p></li><li><p><code>.eslintrc.json</code></p></li><li><p>区别在于配置规则时格式不一样</p><blockquote><p>json 要符合json文件格式，js要符合js文件格式，并使用CommonJS规范，rc可以直接写</p></blockquote></li></ul><p>除了新建文件，也可以在<code>package.json</code> 中 <code>eslintConfig</code> 中对Eslint进行配置，这样做的好处是不需要创建配置文件，在原有文件基础上写</p><p>ESLint 会查找和自动读取它们，所以以上4种配置文件只需要存在一个即可</p><h2 id="_2-具体配置" tabindex="-1">2. 具体配置 <a class="header-anchor" href="#_2-具体配置" aria-label="Permalink to &quot;2. 具体配置&quot;">​</a></h2><blockquote><p>Eslint的配置非常多，想要全部记住不太现实，我们只需要掌握常用的配置即可，如果想查阅更多配置信息，可以看文档：<a href="https://eslint.nodejs.cn/docs/latest/use/configure/" target="_blank" rel="noreferrer">https://eslint.nodejs.cn/docs/latest/use/configure/</a> 大多数情况下，我们会继承现有的规则去使用，比如vue的、react的等等，很少自己动手去写规则</p></blockquote><p>我们以 <code>.eslintrc.js</code> 配置文件为例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析选项</span></span>
<span class="line"><span style="color:#E1E4E8;">    parserOptions: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 具体检查规则</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 继承其他规则</span></span>
<span class="line"><span style="color:#E1E4E8;">    extends: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析选项</span></span>
<span class="line"><span style="color:#24292E;">    parserOptions: {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 具体检查规则</span></span>
<span class="line"><span style="color:#24292E;">    rules: {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 继承其他规则</span></span>
<span class="line"><span style="color:#24292E;">    extends: [],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><ol><li><p>parserOptions 解析选项</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">parserOptions</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ecmaVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// Eslint 检查语法的版本——ES6</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">sourceType</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 采用的模块化规则——ESM</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ecmaFeatures</span><span style="color:#E1E4E8;">: { </span><span style="color:#6A737D;">// 其他ES语法特性</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">jsx</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 如果是 React 项目，就需要开启 jsx 语法</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">parserOptions</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ecmaVersion</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// Eslint 检查语法的版本——ES6</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">sourceType</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 采用的模块化规则——ESM</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ecmaFeatures</span><span style="color:#24292E;">: { </span><span style="color:#6A737D;">// 其他ES语法特性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">jsx</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 如果是 React 项目，就需要开启 jsx 语法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>rules 具体规则</p><ul><li><code>&quot;off&quot;</code> 或 <code>0</code> - 关闭规则，一般用于覆盖别人的规则</li><li><code>&quot;warn&quot;</code> 或 <code>1</code> - 开启规则，使用警告级别的错误：<code>warn</code> (不会导致程序退出)，黄色提示</li><li><code>&quot;error&quot;</code> 或 <code>2</code> - 开启规则，使用错误级别的错误：<code>error</code> (当被触发的时候，程序会退出)，红色提示</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">rules</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">semi</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 禁止使用分号</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;array-callback-return&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;warn&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 强制数组方法的回调函数中有 return 语句，否则警告</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;default-case&#39;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;warn&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 要求 switch 语句中有 default 分支，否则警告</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            commentPattern: </span><span style="color:#9ECBFF;">&#39;^no default$&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#6A737D;">// 允许在最后注释 no default, 就不会有警告了</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">eqeqeq</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;warn&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 强制使用 === 和 !==，否则警告</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;smart&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// https://eslint.bootcss.com/docs/rules/eqeqeq#smart 除了少数情况下不会有警告</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">rules</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">semi</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 禁止使用分号</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;array-callback-return&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;warn&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 强制数组方法的回调函数中有 return 语句，否则警告</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;default-case&#39;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;warn&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 要求 switch 语句中有 default 分支，否则警告</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            commentPattern: </span><span style="color:#032F62;">&#39;^no default$&#39;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#6A737D;">// 允许在最后注释 no default, 就不会有警告了</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">eqeqeq</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;warn&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 强制使用 === 和 !==，否则警告</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;smart&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// https://eslint.bootcss.com/docs/rules/eqeqeq#smart 除了少数情况下不会有警告</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>key是规则名称，value 是对规则的配置</p></blockquote><p>更多规则详见：[<a href="https://eslint.nodejs.cn/docs/latest/rules/" target="_blank" rel="noreferrer">https://eslint.nodejs.cn/docs/latest/rules/</a>)</p></li><li><p>extends 继承</p><p>开发中一点点写 rules 规则太费劲了，所以有更好的办法，继承现有的规则。</p><p>现有以下较为有名的规则：</p><ul><li><a href="http://eslint.cn/docs/rules/" target="_blank" rel="noreferrer">eslint官方的规则</a>：在<a href="http://eslint.cn/docs/user-guide/configuring#extending-configuration-files" target="_blank" rel="noreferrer">配置文件</a>中，使用 <code>&quot;extends&quot;: &quot;eslint:recommended&quot;</code> 来启用推荐的规则，报告一些常见的问题</li><li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/cli-plugin-eslint" target="_blank" rel="noreferrer">Vue Cli 官方的规则open in new window</a>：<code>plugin:vue/essential</code></li><li><a href="https://github.com/facebook/create-react-app/tree/main/packages/eslint-config-react-app" target="_blank" rel="noreferrer">React Cli 官方的规则open in new window</a>：<code>react-app</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 例如在React项目中，我们可以这样写配置</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    extends: [</span><span style="color:#9ECBFF;">&quot;react-app&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 继承规则后，如果想新增规则，或者修改规则，可以在rules配置项中去写    </span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 我们的规则会覆盖掉继承来的react-app的规则</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 所以想要修改规则直接改就是了</span></span>
<span class="line"><span style="color:#E1E4E8;">        eqeqeq: [</span><span style="color:#9ECBFF;">&quot;warn&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;smart&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 例如在React项目中，我们可以这样写配置</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    extends: [</span><span style="color:#032F62;">&quot;react-app&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 继承规则后，如果想新增规则，或者修改规则，可以在rules配置项中去写    </span></span>
<span class="line"><span style="color:#24292E;">    rules: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 我们的规则会覆盖掉继承来的react-app的规则</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 所以想要修改规则直接改就是了</span></span>
<span class="line"><span style="color:#24292E;">        eqeqeq: [</span><span style="color:#032F62;">&quot;warn&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;smart&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></li></ol>`,17),o=[e];function t(c,r,E,i,y,d){return n(),a("div",null,o)}const F=s(p,[["render",t]]);export{h as __pageData,F as default};
