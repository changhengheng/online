import{_ as s,o as l,c as a,Q as n}from"./chunks/framework.19358895.js";const d=JSON.parse('{"title":"事件监听","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Vue/Vue3/base/officialdocument/base/8.事件监听.md","filePath":"program/frontend/Vue/Vue3/base/officialdocument/base/8.事件监听.md","lastUpdated":1695205095000}'),t={name:"program/frontend/Vue/Vue3/base/officialdocument/base/8.事件监听.md"},o=n(`<h1 id="事件监听" tabindex="-1">事件监听 <a class="header-anchor" href="#事件监听" aria-label="Permalink to &quot;事件监听&quot;">​</a></h1><p>使用 v-on 指令 (简写为 @) 监听 DOM 事件，用法：v-on:click=&quot;handler&quot; 或 @click=&quot;handler&quot;。</p><p>事件处理器 (handler) 的值可以是：</p><ul><li>内联事件处理器：事件被触发时执行的内联 JavaScript 语句 (与 onclick 类似)。</li><li>方法事件处理器：一个指向组件上定义的方法的属性名或是路径。</li></ul><h2 id="内联事件处理器" tabindex="-1">内联事件处理器 <a class="header-anchor" href="#内联事件处理器" aria-label="Permalink to &quot;内联事件处理器&quot;">​</a></h2><p>内联 JavaScript 语句是指在 HTML 元素中使用 JavaScript 代码，通常用于简单场景</p><h2 id="方法事件处理器" tabindex="-1">方法事件处理器 <a class="header-anchor" href="#方法事件处理器" aria-label="Permalink to &quot;方法事件处理器&quot;">​</a></h2><p>v-on 也可以接受一个方法名或对某个方法的调用，以应对复杂逻辑</p><p>在内联事件处理器中调用方法允许我们向方法传入自定义参数以代替原生事件（原生事件的参数是事件对象）</p><p>需要在内联事件处理器中访问原生 DOM 事件，可以向该处理器方法传入一个特殊的 $event 变量，或者使用内联箭头函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 使用特殊的 $event 变量 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@click=&quot;warn(&#39;Form</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cannot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">submitted</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">yet.&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">$event)&quot;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Submit</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;/button&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;!--</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">使用内联箭头函数</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">--&gt;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;button</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@click=&quot;(event)</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">warn(&#39;Form</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cannot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">submitted</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">yet.&#39;,</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">event)&quot;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Submit</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;/button&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 使用特殊的 $event 变量 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@click=&quot;warn(&#39;Form</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cannot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">be</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">submitted</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">yet.&#39;,</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">$event)&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Submit</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;/button&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;!--</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">使用内联箭头函数</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">--&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;button</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@click=&quot;(event)</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">warn(&#39;Form</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cannot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">be</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">submitted</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">yet.&#39;,</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">event)&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Submit</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;/button&gt;</span></span></code></pre></div><h2 id="方法与内联事件判断" tabindex="-1">方法与内联事件判断 <a class="header-anchor" href="#方法与内联事件判断" aria-label="Permalink to &quot;方法与内联事件判断&quot;">​</a></h2><p>模板编译器会通过检查 v-on 的值是否是合法的 JavaScript 标识符或属性访问路径来断定是何种形式的事件处理器。举例来说，foo、foo.bar 和 foo[&#39;bar&#39;] 会被视为方法事件处理器，而 foo() 和 count++ 会被视为内联事件处理器。</p><h2 id="事件修饰符" tabindex="-1">事件修饰符 <a class="header-anchor" href="#事件修饰符" aria-label="Permalink to &quot;事件修饰符&quot;">​</a></h2><blockquote><p>原生 DOM 事件使用 event.preventDefault() 阻止默认行为，使用 event.stopPropagation() 阻止事件冒泡</p></blockquote><p>为了方法能更专注于数据逻辑而不用去处理 DOM 事件的细节，Vue 为 v-on 提供了事件修饰符。修饰符是用 . 表示的指令后缀，包含以下这些：</p><ul><li>.stop 阻止事件冒泡</li><li>.prevent 阻止默认行为</li><li>.self 事件只会在事件源触发</li><li>.capture 事件会在捕获阶段传播到事件源时触发</li><li>.once 事件只触发一次，触发完成之后会自动解绑</li><li>.passive 事件永远不会调用 preventDefault()，如果调用了，控制台会抛出一个警告</li></ul><p>使用修饰符时需要注意调用顺序，因为相关代码是以相同的顺序生成的。因此使用 @click.prevent.self 会阻止元素及其子元素的所有点击事件的默认行为，而 @click.self.prevent 则只会阻止对元素本身的点击事件的默认行为。</p><p>请勿同时使用 .passive 和 .prevent，因为 .passive 已经向浏览器表明了你不想阻止事件的默认行为。如果你这么做了，则 .prevent 会被忽略，并且浏览器会抛出警告。</p><h2 id="按键修饰符" tabindex="-1">按键修饰符 <a class="header-anchor" href="#按键修饰符" aria-label="Permalink to &quot;按键修饰符&quot;">​</a></h2><p>键盘事件可以添加按键修饰符</p><p>直接使用 KeyboardEvent.key 暴露的按键名称作为修饰符，但需要转为 kebab-case 形式（短横线分割）。</p><p>Vue 为一些常用的按键提供了别名：</p><ul><li>.enter</li><li>.tab</li><li>.delete (捕获“Delete”和“Backspace”两个按键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ul><p>你可以使用以下系统按键修饰符来触发鼠标或键盘事件监听器，只有当按键被按下时才会触发：</p><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ul><h2 id="exact-修饰符" tabindex="-1">.exact 修饰符 <a class="header-anchor" href="#exact-修饰符" aria-label="Permalink to &quot;.exact 修饰符&quot;">​</a></h2><p>.exact 修饰符允许控制触发一个事件所需的确定组合的系统按键修饰符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@click.ctrl=&quot;onClick&quot;&gt;A&lt;/button&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;!--</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">仅当按下</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Ctrl</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">且未按任何其他键时才会触发</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">--&gt;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;button</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@click.ctrl.exact=&quot;onCtrlClick&quot;&gt;A&lt;/button&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;!--</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">仅当没有按下任何系统按键时触发</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">--&gt;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;button</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">@click.exact=&quot;onClick&quot;&gt;A&lt;/button&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@click.ctrl=&quot;onClick&quot;&gt;A&lt;/button&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;!--</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">仅当按下</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ctrl</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">且未按任何其他键时才会触发</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">--&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;button</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@click.ctrl.exact=&quot;onCtrlClick&quot;&gt;A&lt;/button&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;!--</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">仅当没有按下任何系统按键时触发</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">--&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;button</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">@click.exact=&quot;onClick&quot;&gt;A&lt;/button&gt;</span></span></code></pre></div><h2 id="鼠标按键修饰符" tabindex="-1">鼠标按键修饰符 <a class="header-anchor" href="#鼠标按键修饰符" aria-label="Permalink to &quot;鼠标按键修饰符&quot;">​</a></h2><ul><li>.left</li><li>.right</li><li>.middle</li></ul><p>这些修饰符将处理程序限定为由特定鼠标按键触发的事件。</p>`,32),p=[o];function e(c,i,r,y,E,u){return l(),a("div",null,p)}const b=s(t,[["render",e]]);export{d as __pageData,b as default};
