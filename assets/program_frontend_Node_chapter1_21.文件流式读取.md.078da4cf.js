import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.19358895.js";const h=JSON.parse('{"title":"文件流式读取","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter1/21.文件流式读取.md","filePath":"program/frontend/Node/chapter1/21.文件流式读取.md","lastUpdated":1697287289000}'),p={name:"program/frontend/Node/chapter1/21.文件流式读取.md"},o=l(`<h1 id="文件流式读取" tabindex="-1">文件流式读取 <a class="header-anchor" href="#文件流式读取" aria-label="Permalink to &quot;文件流式读取&quot;">​</a></h1><p><code>fs.createReadStream(path[, options])</code></p><ul><li>path 文件路径</li><li>options 选项配置（ 可选 ）</li></ul><p>返回值： Object</p><p>流式读取是分批次，一批一批地读，同步读取和异步读取是一次性读完。流式读取每次读取64k，读完为止。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.引入fs</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2.创建读取流对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/fs/546806235-1-208.mp4&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3.绑定data事件（获取读取的数据）</span></span>
<span class="line"><span style="color:#E1E4E8;">rs.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当从文件读取一个chunk（有块的意思）时，触发一次data事件，一个chunk是64kb，直至文件读取完为止</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// console.log (chunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(chunk.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// chunk 是一个buffer，可以通过length属性查看其长度为65536，单位是字节，也就是64kb</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// console.log(chunk.toString());// 转字符会乱码，因为MP4文件存储的是视频数据而不是utf-8格式的文字数据</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 4.绑定end事件（可选，文件读取结束之后触发）</span></span>
<span class="line"><span style="color:#E1E4E8;">rs.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;end&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;读取完成&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.引入fs</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2.创建读取流对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/fs/546806235-1-208.mp4&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3.绑定data事件（获取读取的数据）</span></span>
<span class="line"><span style="color:#24292E;">rs.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">chunk</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当从文件读取一个chunk（有块的意思）时，触发一次data事件，一个chunk是64kb，直至文件读取完为止</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// console.log (chunk);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(chunk.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// chunk 是一个buffer，可以通过length属性查看其长度为65536，单位是字节，也就是64kb</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// console.log(chunk.toString());// 转字符会乱码，因为MP4文件存储的是视频数据而不是utf-8格式的文字数据</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 4.绑定end事件（可选，文件读取结束之后触发）</span></span>
<span class="line"><span style="color:#24292E;">rs.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;读取完成&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>流式读取操作在读取大文件时可以提高读取效率，看下一小节。</p>`,7),e=[o];function t(c,r,E,y,i,u){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{h as __pageData,F as default};
