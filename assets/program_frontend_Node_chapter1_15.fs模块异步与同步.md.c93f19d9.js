import{_ as e,o as a,c as s,Q as t}from"./chunks/framework.19358895.js";const f=JSON.parse('{"title":"异步和同步","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter1/15.fs模块异步与同步.md","filePath":"program/frontend/Node/chapter1/15.fs模块异步与同步.md","lastUpdated":1697287289000}'),o={name:"program/frontend/Node/chapter1/15.fs模块异步与同步.md"},l=t('<h1 id="异步和同步" tabindex="-1">异步和同步 <a class="header-anchor" href="#异步和同步" aria-label="Permalink to &quot;异步和同步&quot;">​</a></h1><p>Node.js 中的磁盘操作是由其他线程完成的，结果的处理有两种模式：</p><ul><li>同步处理 JavaScript 主线程会等待其他线程的执行结果，然后再继续执行主线程的代码，效率较低，理解较为直白</li><li>异步处理 JavaScript 主线程不会等待其他线程的执行结果，直接执行后续的主线程代码，效率较好，理解较为抽象</li></ul><p>writeFile是异步执行的。JS代码在主线程执行，遇到writeFile，交由I/O（输入输出）线程执行。异步不等待执行结果，会直接把这个异步任务的回调压到任务队列当中，并继续执行主线程的其他同步代码。当初始化代码执行完毕，会从任务队列中取出异步代码在主线程执行。</p><h2 id="同步写入" tabindex="-1">同步写入 <a class="header-anchor" href="#同步写入" aria-label="Permalink to &quot;同步写入&quot;">​</a></h2><p>fs.writeFileSync(file, data[, options])</p><ul><li>参数与 fs.writeFile 大体一致，只是没有 callback 参数</li><li>返回值： undefined</li></ul><blockquote><p>writeFileSync 是同步写入</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">writeFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./test.txt&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;哈哈哈&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">writeFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./test.txt&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;哈哈哈&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>主线程遇到writeFileSync，阻塞后续代码执行，执行完再执行其他代码。</p>',10),n=[l];function p(r,c,i,d,_,h){return a(),s("div",null,n)}const y=e(o,[["render",p]]);export{f as __pageData,y as default};
