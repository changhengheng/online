import{_ as e,o as a,c as s,Q as l}from"./chunks/framework.419948d5.js";const u=JSON.parse('{"title":"Babel","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/webpack/chapter1/19.Babel介绍.md","filePath":"program/frontend/webpack/chapter1/19.Babel介绍.md","lastUpdated":1694391214000}'),o={name:"program/frontend/webpack/chapter1/19.Babel介绍.md"},p=l(`<h1 id="babel" tabindex="-1">Babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;Babel&quot;">​</a></h1><p>babel 是一个 JavaScript 编译器，主要用于将 ES6 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中</p><blockquote><p>我们开发时使用的各种语法，比如 react、vue 等，都是通过 babel 进行转换的 记得查babel官网 学babel主要是学习预设——presets的配置</p></blockquote><h2 id="_1-配置文件" tabindex="-1">1. 配置文件 <a class="header-anchor" href="#_1-配置文件" aria-label="Permalink to &quot;1. 配置文件&quot;">​</a></h2><p>新建 babel 配置文件，位于项目根目录。配置文件有 5 种写法：</p><ul><li><p><code>babel.config.*</code>：</p><ul><li><code>babel.config.js</code></li><li><code>babel.config.json</code></li></ul></li><li><p><code>.babelrc.*</code></p><ul><li><code>.babelrc</code></li><li><code>.babelrc.js</code></li><li><code>.babelrc.json</code></li></ul></li><li><p>也可以在 <code>package.json </code> 中 <code> babel</code> 配置项里直接写 babel 的配置，不需要创建文件，在原有文件基础上写，Babel 会查找和自动读取它们，所以以上配置文件只需要存在一个即可</p></li></ul><h2 id="_2-具体配置" tabindex="-1">2. 具体配置 <a class="header-anchor" href="#_2-具体配置" aria-label="Permalink to &quot;2. 具体配置&quot;">​</a></h2><p>我们以 <code>babel.config.js</code> 配置文件为例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 预设</span></span>
<span class="line"><span style="color:#E1E4E8;">    presets: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 预设</span></span>
<span class="line"><span style="color:#24292E;">    presets: [],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>presets 预设：简单理解：就是一组 Babel 插件, 扩展 Babel 功能</p><ul><li><code>@babel/preset-env</code>: 一个智能预设，允许您使用最新的 JavaScript，可以将最新的ES语法编译成ES5语法，比如箭头函数等，便于在低版本浏览器中运行。</li><li><code>@babel/preset-react</code>：一个用来编译 React jsx 语法的预设</li><li><code>@babel/preset-typescript</code>：一个用来编译 TypeScript 语法的预设</li></ul><blockquote><p>预设可以加载多个，也可以加载一个</p></blockquote>`,12),c=[p];function n(t,r,i,b,d,_){return a(),s("div",null,c)}const E=e(o,[["render",n]]);export{u as __pageData,E as default};
