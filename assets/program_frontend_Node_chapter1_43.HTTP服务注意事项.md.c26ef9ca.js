import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.419948d5.js";const g=JSON.parse('{"title":"HTTP服务注意事项","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter1/43.HTTP服务注意事项.md","filePath":"program/frontend/Node/chapter1/43.HTTP服务注意事项.md","lastUpdated":1697287289000}'),e={name:"program/frontend/Node/chapter1/43.HTTP服务注意事项.md"},p=l(`<h1 id="http服务注意事项" tabindex="-1">HTTP服务注意事项 <a class="header-anchor" href="#http服务注意事项" aria-label="Permalink to &quot;HTTP服务注意事项&quot;">​</a></h1><ul><li><p>命令行 ctrl + c 停止服务</p></li><li><p>当服务启动后，更新代码 必须重启服务才能生效</p></li><li><p>响应内容中文乱码的解决办法</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;content-type&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;text/html;charset=utf-8&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">response.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;content-type&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;text/html;charset=utf-8&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div></li><li><p>端口号被占用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">: listen </span><span style="color:#B392F0;">EADDRINUSE</span><span style="color:#E1E4E8;">: address already </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;"> :::</span><span style="color:#79B8FF;">9000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">: listen </span><span style="color:#6F42C1;">EADDRINUSE</span><span style="color:#24292E;">: address already </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">use</span><span style="color:#24292E;"> :::</span><span style="color:#005CC5;">9000</span></span></code></pre></div><ul><li>关闭当前正在运行监听端口的服务 （ 使用较多 ）</li><li>修改其他端口号</li></ul></li><li><p>HTTP 协议默认端口是 80 。HTTPS 协议的默认端口是 443, HTTP 服务开发常用端口有 3000， 8080，8090，9000 等 如果端口被其他程序占用，可以使用<strong>资源监视器</strong>找到占用端口的程序，然后使用<strong>任务管理器</strong>关闭 对应的程序</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// &lt;传输协议&gt;://&lt;internet主机域名或者IP地址:端口号&gt;/&lt;路径&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 如果端口号使用默认端口，可以省略</span></span>
<span class="line"><span style="color:#6A737D;">// 如果路径是根路径 / ，且服务器资源存放在根目录下，也可以省略，但请求报文的请求首行可以看到其实访问的是根目录 /</span></span>
<span class="line"><span style="color:#6A737D;">// 最终结果就是只通过ip地址就可以访问服务器的内容</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// &lt;传输协议&gt;://&lt;internet主机域名或者IP地址:端口号&gt;/&lt;路径&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 如果端口号使用默认端口，可以省略</span></span>
<span class="line"><span style="color:#6A737D;">// 如果路径是根路径 / ，且服务器资源存放在根目录下，也可以省略，但请求报文的请求首行可以看到其实访问的是根目录 /</span></span>
<span class="line"><span style="color:#6A737D;">// 最终结果就是只通过ip地址就可以访问服务器的内容</span></span></code></pre></div><blockquote><p>资源监视器直接搜索就能找到</p></blockquote></li></ul>`,2),t=[p];function o(c,r,i,d,y,E){return a(),n("div",null,t)}const _=s(e,[["render",o]]);export{g as __pageData,_ as default};
