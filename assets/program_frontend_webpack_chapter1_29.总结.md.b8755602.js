import{_ as e,o as l,c as i,Q as a}from"./chunks/framework.19358895.js";const h=JSON.parse('{"title":"总结","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/webpack/chapter1/29.总结.md","filePath":"program/frontend/webpack/chapter1/29.总结.md","lastUpdated":1694391214000}'),t={name:"program/frontend/webpack/chapter1/29.总结.md"},o=a('<h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1><p>本章节我们学会了 Webpack 基本使用，掌握了以下功能：</p><ol><li><p>两种开发模式</p><ul><li>开发模式：代码能编译自动化运行（开发服务器）</li><li>生产模式：代码编译优化输出（兼容性处理、代码压缩）</li></ul></li><li><p>Webpack 基本功能</p><ul><li>开发模式：可以编译 ESM 语法</li><li>生产模式：可以编译 ESM 语法，压缩 js 代码</li></ul><blockquote><p>Html 能自动压缩是因为使用了 html-webpack-plugin 这个插件</p></blockquote></li><li><p>Webpack 配置文件</p><ul><li>5 个核心概念 <ul><li>entry</li><li>output</li><li>loader</li><li>plugins</li><li>mode</li></ul></li><li>devServer 配置</li></ul></li><li><p>Webpack 脚本指令用法</p><ul><li><code>webpack</code> 直接打包输出</li><li><code>webpack serve</code> 启动开发服务器，内存编译打包没有输出</li></ul></li></ol>',3),p=[o];function r(c,_,n,d,s,u){return l(),i("div",null,p)}const k=e(t,[["render",r]]);export{h as __pageData,k as default};
