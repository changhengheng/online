import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.19358895.js";const u=JSON.parse('{"title":"fs（file system）","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter1/14.fs模块之写入文件.md","filePath":"program/frontend/Node/chapter1/14.fs模块之写入文件.md","lastUpdated":1697287289000}'),p={name:"program/frontend/Node/chapter1/14.fs模块之写入文件.md"},o=l(`<h1 id="fs-file-system" tabindex="-1">fs（file system） <a class="header-anchor" href="#fs-file-system" aria-label="Permalink to &quot;fs（file system）&quot;">​</a></h1><p>fs 模块可以实现与硬盘的交互，例如文件的创建、删除、重命名、移动，文件内容的写入、读取，以及文件夹的相关操作</p><h2 id="写入文件" tabindex="-1">写入文件 <a class="header-anchor" href="#写入文件" aria-label="Permalink to &quot;写入文件&quot;">​</a></h2><p>需求：新建一个文件 <code>hello.txt</code>，写入内容 <code>world</code></p><p><code>fs.writeFile(file, data[, options], callback)</code></p><ul><li>file 文件名</li><li>data 待写入的数据</li><li>options 选项设置 （可选）</li><li>callback 写入回调</li></ul><p>返回值： undefined</p><blockquote><p>writeFile是异步执行的，由I/O线程执行 文件名是目录+文件名+文件扩展名 文件如果不存在，会自动创建并写入 回调函数在文件写入完成之后执行，默认会传递错误信息。如果写入失败，err是一个错误对象。如果写入成功，err是null。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.导入fs模块</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fs&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// require是COMMOMJS规范的关键字，用来引入模块，fs是模块名，是一个全局变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2.写入</span></span>
<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">writeFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./hello.txt&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果不是null，写入失败</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(err){</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;写入失败&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果是null，写入成功</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;写入成功&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.导入fs模块</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// require是COMMOMJS规范的关键字，用来引入模块，fs是模块名，是一个全局变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2.写入</span></span>
<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">writeFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./hello.txt&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果不是null，写入失败</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(err){</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;写入失败&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果是null，写入成功</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;写入成功&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>为什么需要使用命令操作文件，不直接用鼠标操作文件？ 因为，命令是代码，而鼠标需要人操作。代码可以自动化操作，不需要额外的人力，而且操作时机非常灵活。</p><p>打开文件、编辑文件、保存文件，实际上做了什么？保存文件实际上是把变化信息写入了文件当中。</p><p>VSCode是使用Electron借助NodeJS开发的，也是使用fs模块实现文件写入的。</p>`,12),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{u as __pageData,F as default};
