import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.419948d5.js";const h=JSON.parse('{"title":"tsconfig.json","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/TypeScript/base/2.tsconfig.json.md","filePath":"program/frontend/TypeScript/base/2.tsconfig.json.md","lastUpdated":1694599481000}'),l={name:"program/frontend/TypeScript/base/2.tsconfig.json.md"},p=o(`<h1 id="tsconfig-json" tabindex="-1">tsconfig.json <a class="header-anchor" href="#tsconfig-json" aria-label="Permalink to &quot;tsconfig.json&quot;">​</a></h1><blockquote><p>学习的原因：使用 ts 的项目越来越多，要学会按需配置 ts <a href="https://www.typescriptlang.org/tsconfig" target="_blank" rel="noreferrer">tsconfig 参考</a><br><a href="https://wangdoc.com/typescript/tsconfig.json" target="_blank" rel="noreferrer">阮一峰</a></p></blockquote><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>tsconfig.json 是 TypeScript 项目的配置文件，放在项目的根目录。反过来说，如果一个目录里面有 tsconfig.json，TypeScript 就认为这是项目的根目录。</p><p>如果项目源码是 JavaScript，但是想用 TypeScript 处理，那么配置文件的名字是 jsconfig.json，它跟 tsconfig 的写法是一样的。</p><p>tsconfig.json 文件主要供 tsc 编译器使用，它的命令行参数--project 或-p 可以指定 tsconfig.json 的位置（目录或文件皆可）。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./dir</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./dir</span></span></code></pre></div><blockquote><ol><li>tsconfig.json 文件中指定了用来编译这个项目的根文件和编译选项。<a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html" target="_blank" rel="noreferrer">https://www.tslang.cn/docs/handbook/tsconfig-json.html</a></li><li>根文件就是 tsconfig.json （太绕了）</li><li>编译选项是给 tsc 编译器使用的，比如告诉它哪些文件需要编译、编译后的文件放在哪里、编译的 JS 版本等等，都是通过在 tsconfig.json 中进行配置来完成的。Vite 没有使用 tsc 编译 ts，而是使用的 ESBuild。</li></ol></blockquote><p>如果不指定配置文件的位置，tsc 就会在当前目录下搜索 tsconfig.json 文件，如果不存在，就到上一级目录搜索，直到找到为止。</p><p>tsconfig.json 文件的格式，是一个 JSON 对象，最简单的情况可以只放置一个空对象{}。</p><p>tsconfig.json 文件可以不必手写，使用 tsc 命令的--init 参数自动生成。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--init</span></span></code></pre></div><p>上面命令生成的 tsconfig.json 文件，里面会有一些默认配置。</p><p>你也可以使用别人预先写好的 tsconfig.json 文件，npm 的 @tsconfig 名称空间下面有很多模块，都是写好的 tsconfig.json 样本，比如 @tsconfig/recommended 和 @tsconfig/node16。</p><p>这些模块需要安装，以 @tsconfig/deno 为例。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@tsconfig/deno</span></span>
<span class="line"><span style="color:#6A737D;"># 或者</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@tsconfig/deno</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@tsconfig/deno</span></span>
<span class="line"><span style="color:#6A737D;"># 或者</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@tsconfig/deno</span></span></code></pre></div><p>安装以后，就可以在 tsconfig.json 里面引用这个模块，相当于继承它的设置，然后进行扩展。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;extends&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;@tsconfig/deno/tsconfig.json&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#032F62;">&quot;extends&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;@tsconfig/deno/tsconfig.json&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>@tsconfig 空间下包含的完整 tsconfig 文件目录，可以查看 <a href="https://github.com/tsconfig/bases/tree/main/bases" target="_blank" rel="noreferrer">GitHub</a>。</p><p>tsconfig.json 的一级属性并不多，只有很少几个，但是 compilerOptions 属性有很多二级属性。下面先逐一介绍一级属性，然后再介绍 compilerOptions 的二级属性，按照首字母排序。</p><h2 id="配置项" tabindex="-1">配置项 <a class="header-anchor" href="#配置项" aria-label="Permalink to &quot;配置项&quot;">​</a></h2><h3 id="顶层配置-top-level" tabindex="-1">顶层配置（top level） <a class="header-anchor" href="#顶层配置-top-level" aria-label="Permalink to &quot;顶层配置（top level）&quot;">​</a></h3><blockquote><p>一级属性，一共 6 个：files,extends,include,exclude and references，还有 compilerOptions</p></blockquote><h4 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h4><ul><li>值是一个数组</li><li>指定要编译的文件列表</li><li>支持逐一列出文件，也支持通配符 <ul><li><code>?</code>：指代单个字符</li><li><code>*</code>：指代任意字符，不含路径分隔符</li><li><code>**</code>：指定任意目录层级。 如果不指定文件后缀名，默认包括 .ts、.tsx 和 .d.ts 文件。如果打开了 allowJs，那么还包括 .js 和 .jsx。</li></ul></li><li>文件位置相对于当前配置文件而定</li></ul><h4 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h4><ul><li>值是一个数组</li><li>必须和 include 一起使用</li><li>指定编译 include 指定的文件时，要跳过编译的文件列表</li><li>支持 include 相同的通配符 注意：exclude 只能跳过由 include 指定的要编译的文件列表中的文件。另，exclude 不会阻止指定的文件提交到代码库，只是会更改 include 配置捕捉到的的文件列表（让它不被编译）。</li></ul><h4 id="references" tabindex="-1">references <a class="header-anchor" href="#references" aria-label="Permalink to &quot;references&quot;">​</a></h4><ul><li>值是一个对象组成的数组，用来设置需要引用的底层项目，适合一个大项目由许多小项目构成的情况</li><li>references 数组成员对象的 path 属性，既可以是含有文件 tsconfig.json 的目录，也可以直接是该文件。<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;references&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        { </span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;../pkg1&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        { </span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;../pkg2/tsconfig.json&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;references&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        { </span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;../pkg1&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">        { </span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;../pkg2/tsconfig.json&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li>与此同时，引用的底层项目的 tsconfig.json 必须启用 composite 属性。<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;composite&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;composite&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul><h4 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h4><p>files 属性指定编译的文件列表，如果其中有一个文件不存在，就会报错。</p><p>它是一个数组，排在前面的文件先编译。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;files&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;a.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;b.ts&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;files&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;a.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;b.ts&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该属性必须逐一列出文件，不支持文件匹配。如果文件较多，建议使用 include 和 exclude 属性。</p><h4 id="extends" tabindex="-1">extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;extends&quot;">​</a></h4><p>tsconfig.json 可以继承另一个 tsconfig.json 文件的配置。如果一个项目有多个配置，可以把共同的配置写成 tsconfig.base.json，其他的配置文件继承该文件，这样便于维护和修改。</p><p>extends 属性用来指定所要继承的配置文件。它可以是本地文件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;extends&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;../tsconfig.base.json&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#032F62;">&quot;extends&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;../tsconfig.base.json&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果 extends 属性指定的路径不是以./或../开头，那么编译器将在 node_modules 目录下查找指定的配置文件。</p><p>extends 属性也可以继承已发布的 npm 模块里面的 tsconfig 文件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;extends&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;@tsconfig/node12/tsconfig.json&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#032F62;">&quot;extends&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;@tsconfig/node12/tsconfig.json&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>extends 指定的 tsconfig.json 会先加载，然后加载当前的 tsconfig.json。如果两者有重名的属性，后者会覆盖前者。</p><h4 id="compileroptions" tabindex="-1">compilerOptions <a class="header-anchor" href="#compileroptions" aria-label="Permalink to &quot;compilerOptions&quot;">​</a></h4><p>compilerOptions 属性用来定制编译行为。这个属性可以省略，这时编译器将使用默认设置。</p><blockquote><p>compilerOptions 配置项有很多二级配置，有时间再仔细研究</p></blockquote>`,45),e=[p];function t(c,i,r,d,E,u){return n(),a("div",null,e)}const g=s(l,[["render",t]]);export{h as __pageData,g as default};
