import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.19358895.js";const u=JSON.parse('{"title":"练习文件复制","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter1/22.练习文件复制.md","filePath":"program/frontend/Node/chapter1/22.练习文件复制.md","lastUpdated":1697287289000}'),l={name:"program/frontend/Node/chapter1/22.练习文件复制.md"},o=p(`<h1 id="练习文件复制" tabindex="-1">练习文件复制 <a class="header-anchor" href="#练习文件复制" aria-label="Permalink to &quot;练习文件复制&quot;">​</a></h1><p>复制文件就是读取文件内容，然后放在另一个为止</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 方式一</span></span>
<span class="line"><span style="color:#6A737D;">// 1.引入fs</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">process</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;process&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 通过process模块的方法可以获得代码运行的内存占用量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2.同步读取文件</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/fs/546806235-1-208.mp4&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 3.写入文件</span></span>
<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">writeFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/546806235-1-207.mp4&quot;</span><span style="color:#E1E4E8;">, data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// console.log(process.memoryUsage()); // 输出内存使用量</span></span>
<span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        rss: 20672512, // rss 是占用的整个内存的大小，单位是字节，19.71MB</span></span>
<span class="line"><span style="color:#6A737D;">        heapTotal: 4931584,</span></span>
<span class="line"><span style="color:#6A737D;">        heapUsed: 4238800,</span></span>
<span class="line"><span style="color:#6A737D;">        external: 335589,</span></span>
<span class="line"><span style="color:#6A737D;">        arrayBuffers: 19350</span></span>
<span class="line"><span style="color:#6A737D;">    }</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 方式一</span></span>
<span class="line"><span style="color:#6A737D;">// 1.引入fs</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">process</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;process&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 通过process模块的方法可以获得代码运行的内存占用量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2.同步读取文件</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/fs/546806235-1-208.mp4&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 3.写入文件</span></span>
<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">writeFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/546806235-1-207.mp4&quot;</span><span style="color:#24292E;">, data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// console.log(process.memoryUsage()); // 输出内存使用量</span></span>
<span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        rss: 20672512, // rss 是占用的整个内存的大小，单位是字节，19.71MB</span></span>
<span class="line"><span style="color:#6A737D;">        heapTotal: 4931584,</span></span>
<span class="line"><span style="color:#6A737D;">        heapUsed: 4238800,</span></span>
<span class="line"><span style="color:#6A737D;">        external: 335589,</span></span>
<span class="line"><span style="color:#6A737D;">        arrayBuffers: 19350</span></span>
<span class="line"><span style="color:#6A737D;">    }</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 方式二</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">process</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;process&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 通过process模块的方法可以获得代码运行的内存占用量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建读取流对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/fs/546806235-1-208.mp4&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建写入流对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ws</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">createWriteStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/546806235-1-206.mp4&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 绑定data事件</span></span>
<span class="line"><span style="color:#E1E4E8;">rs.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ws.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(chunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">rs.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;end&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(process.</span><span style="color:#B392F0;">memoryUsage</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 输出内存使用量</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 方式二</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">process</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;process&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 通过process模块的方法可以获得代码运行的内存占用量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建读取流对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/fs/546806235-1-208.mp4&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建写入流对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ws</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">createWriteStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/546806235-1-206.mp4&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 绑定data事件</span></span>
<span class="line"><span style="color:#24292E;">rs.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">chunk</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  ws.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(chunk);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">rs.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(process.</span><span style="color:#6F42C1;">memoryUsage</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 输出内存使用量</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>方式二更好，因为所占资源更小。方式一是一次性读取文件整体，然后整体写入内存进行操作，非常耗费内存资源。方式二理想状态是只需64kb内存空间就可以完成复制操作，因为它每次都取64kb，取一点写一点，直至完成复制操作。但是，通常读取速度比写入速度更快，因此当一次读取完成下一次读取开始时，上一次写入可能还没有完成，因此会同时累积多次读取的值，此时占用的内存空间是多于64kb的，但即使如此，流式读写操作所占用的内存空间还是小于同步读写和异步读写的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 方式二的简写</span></span>
<span class="line"><span style="color:#6A737D;">// 创建读取流对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/fs/546806235-1-208.mp4&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建写入流对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ws</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">createWriteStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/546806235-1-206.mp4&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">rs.</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(ws); </span><span style="color:#6A737D;">//pipe是管道的意思，这段代码是指创建完读取流就通过管道传给写入流</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 方式二的简写</span></span>
<span class="line"><span style="color:#6A737D;">// 创建读取流对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/fs/546806235-1-208.mp4&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建写入流对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ws</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">createWriteStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/546806235-1-206.mp4&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">rs.</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(ws); </span><span style="color:#6A737D;">//pipe是管道的意思，这段代码是指创建完读取流就通过管道传给写入流</span></span></code></pre></div>`,6),e=[o];function c(t,r,y,E,i,F){return n(),a("div",null,e)}const A=s(l,[["render",c]]);export{u as __pageData,A as default};
