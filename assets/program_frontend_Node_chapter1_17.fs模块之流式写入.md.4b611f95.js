import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.419948d5.js";const d=JSON.parse('{"title":"流式写入","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter1/17.fs模块之流式写入.md","filePath":"program/frontend/Node/chapter1/17.fs模块之流式写入.md","lastUpdated":1697287289000}'),l={name:"program/frontend/Node/chapter1/17.fs模块之流式写入.md"},o=p(`<h1 id="流式写入" tabindex="-1">流式写入 <a class="header-anchor" href="#流式写入" aria-label="Permalink to &quot;流式写入&quot;">​</a></h1><p>追加写入使用场景：需要持续往文件中写入内容</p><p>比如程序日志、记录用户行为（比如访问时间）</p><p>流式写入使用 fs.createWriteStream(path[, options])</p><ul><li>path 文件路径</li><li>options 选项配置（ 可选 ）</li></ul><p>返回值： Object</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.引入fs模块</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2.创建写入流对象：和文件建立通道，可以在任何时候想影响文件内容</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> ws </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">createWriteStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./hello.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3.向文件写入内容</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;法&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;外&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;狂&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;徒&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 4.关闭通道</span></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.引入fs模块</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2.创建写入流对象：和文件建立通道，可以在任何时候想影响文件内容</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> ws </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">createWriteStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./hello.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3.向文件写入内容</span></span>
<span class="line"><span style="color:#24292E;">ws.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;法&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ws.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;外&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ws.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狂&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ws.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;徒&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 4.关闭通道</span></span>
<span class="line"><span style="color:#24292E;">ws.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><blockquote><p>关闭通道是可选的，不影响写入文件的操作，而且脚本执行完时，资源会被回收，通道也会断开</p></blockquote><p>和writeFile区别：这种方式适用于使用频率较高的场景，因为通道可以一直保持联系。WriteFile每次都需要建立新通道。流式写入适用于写入大文件的场景。 程序打开一个文件是需要消耗资源的 ，流式写入可以减少打开关闭文件的次数。 因此，流式写入方式适用于 大文件写入或者频繁写入 的场景, writeFile 适合于 写入频率较低的场景</p>`,9),e=[o];function t(c,r,E,y,i,u){return a(),n("div",null,e)}const _=s(l,[["render",t]]);export{d as __pageData,_ as default};
