import{_ as e,o as t,c as o,Q as a}from"./chunks/framework.419948d5.js";const u=JSON.parse('{"title":"静态资源中间件注意事项","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter3/13.静态资源中间件注意事项.md","filePath":"program/frontend/Node/chapter3/13.静态资源中间件注意事项.md","lastUpdated":1697287289000}'),_={name:"program/frontend/Node/chapter3/13.静态资源中间件注意事项.md"},r=a('<h1 id="静态资源中间件注意事项" tabindex="-1">静态资源中间件注意事项 <a class="header-anchor" href="#静态资源中间件注意事项" aria-label="Permalink to &quot;静态资源中间件注意事项&quot;">​</a></h1><p>注意事项:</p><ul><li><p>index.html 文件为默认打开的资源</p><blockquote><p>无论访问哪一个路由（虽然一般都为/)，默认都会返回index.html，而且index.html一般都存放在静态资源目录下。所以，可以直接使用协议+域名来获取静态资源的index.html文件，而不用添加静态资源目录，也不用写index.html</p></blockquote></li><li><p>如果静态资源与路由规则同时匹配，谁先匹配谁就响应</p><blockquote><p>因为第一种情况的存在，一般可以使用index.html文件作为网站的首页，这回衍生出另一个问题：即路由<code>/</code>对应的路由回调也会执行，两者同时匹配时的优先级问题。这种情况下，看代码执行顺序，谁先执行谁优先级更高（看静态资源中间件的代码和监听根路由的代码谁在前）。</p></blockquote></li><li><p>路由一般响应动态资源，静态资源中间件一般响应静态资源</p></li></ul>',3),n=[r];function d(l,c,p,i,s,h){return t(),o("div",null,n)}const f=e(_,[["render",d]]);export{u as __pageData,f as default};
