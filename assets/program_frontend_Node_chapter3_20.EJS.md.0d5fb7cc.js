import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.19358895.js";const F=JSON.parse('{"title":"什么是 EJS","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter3/20.EJS.md","filePath":"program/frontend/Node/chapter3/20.EJS.md","lastUpdated":1697287289000}'),p={name:"program/frontend/Node/chapter3/20.EJS.md"},o=l(`<h1 id="什么是-ejs" tabindex="-1">什么是 EJS <a class="header-anchor" href="#什么是-ejs" aria-label="Permalink to &quot;什么是 EJS&quot;">​</a></h1><p>EJS 是一个高效的 Javascript 的模板引擎</p><p>官网: <a href="https://ejs.co/" target="_blank" rel="noreferrer">https://ejs.co/</a></p><p>中文站：<a href="https://ejs.bootcss.com/" target="_blank" rel="noreferrer">https://ejs.bootcss.com/</a></p><p>模板引擎是用来分离用户界面和业务数据的，用户界面可以理解为HTML，业务数据可以理解为JS（指服务端JS，不是客户端JS），而EJS的作用就是分离HTML和JS。<strong>通过特定的语法, 来动态地用数据渲染出 HTML 文档</strong>.</p><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><blockquote><p>npm 安装包时会自动寻找安装目录，一般package.json在项目根目录下，而npm命令可以运行在项目中的子文件夹路径内</p></blockquote><p>ejs对象有下面两个成员函数 1、ejs.compile(str, options); 将返回内部解析好的Function函数 2、ejs.render(str, options); 返回经过解析的字符串</p><p>ejs的render函数有两个参数 第一个是字符串，第二个是可选的对象，和其他javascript模版一样需要渲染的数据也是包含在option对象中的。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ejs</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">,option);  </span></span>
<span class="line"><span style="color:#6A737D;"> // 渲染字符串 str 一般是通过nodejs文件系统的readfile方法读取 </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;"> ejs</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">,{  </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> user_data  </span></span>
<span class="line"><span style="color:#6A737D;"> // 需要渲染的数据 </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ejs</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">,option);  </span></span>
<span class="line"><span style="color:#6A737D;"> // 渲染字符串 str 一般是通过nodejs文件系统的readfile方法读取 </span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;"> ejs</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">,{  </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;"> data </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> user_data  </span></span>
<span class="line"><span style="color:#6A737D;"> // 需要渲染的数据 </span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre></div><p>其中options的一些参数为： 1、cache：是否缓存解析后的模版，需要filename作为key； 2、filename：模版文件名； 3、scope：complile后的Function执行所在的上下文环境； 4、debug：标识是否是debeg状态，debug为true则会输出生成的Function内容； 5、compileDebug：标识是否是编译debug，为true则会生成解析过程中的跟踪信息，用于调试； 6、client，标识是否用于浏览器客户端运行，为true则返回解析后的可以单独运行的Function函数； 7、open，代码开头标记，默认为&#39;&lt;%&#39;； 8、close，代码结束标记，默认为&#39;%&gt;&#39;； 9、其他的一些用于解析模版时提供的变量。 在express中使用时，options参数将由response.render进行传入，其中包含了一些express中的设置，以及用户提供的变量值。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- ./1.html--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;viewport&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;Document&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;我嘞</span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">%= qu %&gt;&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    我嘞</span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">%= and %&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- ./1.html--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;viewport&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;Document&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;我嘞</span><span style="color:#B31D28;font-style:italic;">&lt;</span><span style="color:#24292E;">%= qu %&gt;&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    我嘞</span><span style="color:#B31D28;font-style:italic;">&lt;</span><span style="color:#24292E;">%= and %&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.安装ejs</span></span>
<span class="line"><span style="color:#6A737D;">// 2.引入ejs</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ejs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ejs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./1.html&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> qu </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;个去&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 使用ejs渲染</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;%= 输出数据到模板（输出是转义 HTML 标签）</span></span>
<span class="line"><span style="color:#6A737D;">// %&gt; 一般结束标签</span></span>
<span class="line"><span style="color:#6A737D;">// render会解析传入的字符串（参数一），找到对应的语法，将其中的变量变成参数二中对应的键名的键值，再和参数一拼接并输出</span></span>
<span class="line"><span style="color:#6A737D;">// 这样做会把数据和页面完全分开：</span></span>
<span class="line"><span style="color:#6A737D;">// 1.页面写在html文件里</span></span>
<span class="line"><span style="color:#6A737D;">// 2.服务端JS写在js文件里</span></span>
<span class="line"><span style="color:#6A737D;">// 3.服务端使用fs读取可以读取html文件的内容</span></span>
<span class="line"><span style="color:#6A737D;">// 这样做还可以使用js动态更新页面内容：</span></span>
<span class="line"><span style="color:#6A737D;">// 1.ejs模板语法写在html页面里</span></span>
<span class="line"><span style="color:#6A737D;">// 2.服务端js声明语法变量</span></span>
<span class="line"><span style="color:#6A737D;">// 3.更新变量内容会同时更新模板内容</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> and </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;and&#39;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ejs.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(str, { qu: qu, and: and });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(result);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.安装ejs</span></span>
<span class="line"><span style="color:#6A737D;">// 2.引入ejs</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ejs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ejs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./1.html&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> qu </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;个去&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 使用ejs渲染</span></span>
<span class="line"><span style="color:#6A737D;">// &lt;%= 输出数据到模板（输出是转义 HTML 标签）</span></span>
<span class="line"><span style="color:#6A737D;">// %&gt; 一般结束标签</span></span>
<span class="line"><span style="color:#6A737D;">// render会解析传入的字符串（参数一），找到对应的语法，将其中的变量变成参数二中对应的键名的键值，再和参数一拼接并输出</span></span>
<span class="line"><span style="color:#6A737D;">// 这样做会把数据和页面完全分开：</span></span>
<span class="line"><span style="color:#6A737D;">// 1.页面写在html文件里</span></span>
<span class="line"><span style="color:#6A737D;">// 2.服务端JS写在js文件里</span></span>
<span class="line"><span style="color:#6A737D;">// 3.服务端使用fs读取可以读取html文件的内容</span></span>
<span class="line"><span style="color:#6A737D;">// 这样做还可以使用js动态更新页面内容：</span></span>
<span class="line"><span style="color:#6A737D;">// 1.ejs模板语法写在html页面里</span></span>
<span class="line"><span style="color:#6A737D;">// 2.服务端js声明语法变量</span></span>
<span class="line"><span style="color:#6A737D;">// 3.更新变量内容会同时更新模板内容</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> and </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;and&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ejs.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(str, { qu: qu, and: and });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result);</span></span></code></pre></div>`,13),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
