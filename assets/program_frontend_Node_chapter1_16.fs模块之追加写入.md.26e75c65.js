import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.19358895.js";const u=JSON.parse('{"title":"追加写入","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter1/16.fs模块之追加写入.md","filePath":"program/frontend/Node/chapter1/16.fs模块之追加写入.md","lastUpdated":1697287289000}'),o={name:"program/frontend/Node/chapter1/16.fs模块之追加写入.md"},p=l(`<h1 id="追加写入" tabindex="-1">追加写入 <a class="header-anchor" href="#追加写入" aria-label="Permalink to &quot;追加写入&quot;">​</a></h1><p>追加写入是指在文件末尾写入新的内容</p><p>appendFile 作用是在文件尾部追加内容，appendFile 语法与 writeFile 语法完全相同：</p><p>fs.appendFile(file, data[, options], callback) fs.appendFileSync(file, data[, options])</p><p>返回值： 二者都为 undefined</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fs&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">appendFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./hello.txt&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\r\\n</span><span style="color:#9ECBFF;">新增内容&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(err){</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;写入失败&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;写入成功&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">appendFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./hello.txt&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">新增内容&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">err</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(err){</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;写入失败&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;写入成功&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><blockquote><p>在Windows中： &#39;\\r&#39; 回车，回到当前行的行首，而不会换到下一行，如果接着输出的话，本行以前的内容会被逐一覆盖； &#39;\\n&#39; 换行，换到当前位置的下一行，而不会回到行首； Unix系统里，每行结尾只有“&lt;换行&gt;”，即&quot;\\n&quot;；Windows系统里面，每行结尾是“&lt;回车&gt;&lt;换行&gt;”，即“\\r\\n”；Mac系统里，每行结尾是“&lt;回车&gt;”，即&quot;\\r&quot;；。一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</p></blockquote><p>writeFile也可以实现追加写入，配置flag为a即可：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">writeFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./node/hello.txt&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;asasa&quot;</span><span style="color:#E1E4E8;">, { flag: </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;"> }, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;写入失败&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;写入成功&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">writeFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./node/hello.txt&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;asasa&quot;</span><span style="color:#24292E;">, { flag: </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;"> }, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;写入失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;写入成功&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div>`,9),e=[p];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const g=s(o,[["render",t]]);export{u as __pageData,g as default};
