import{_ as r,o as e,c as a,Q as s}from"./chunks/framework.19358895.js";const m=JSON.parse('{"title":"加入新公司，怎样快速熟悉业务和项目？","description":"","frontmatter":{},"headers":[],"relativePath":"program/businesslogic/2.加入新公司，怎样快速熟悉业务和项目.md","filePath":"program/businesslogic/2.加入新公司，怎样快速熟悉业务和项目.md","lastUpdated":1694412824000}'),t={name:"program/businesslogic/2.加入新公司，怎样快速熟悉业务和项目.md"},h=s('<h1 id="加入新公司-怎样快速熟悉业务和项目" tabindex="-1">加入新公司，怎样快速熟悉业务和项目？ <a class="header-anchor" href="#加入新公司-怎样快速熟悉业务和项目" aria-label="Permalink to &quot;加入新公司，怎样快速熟悉业务和项目？&quot;">​</a></h1><p>很多新人进入一家新公司后，最头疼的就是如何快速了解公司的业务和<a href="https://www.zhihu.com/search?q=%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">项目架构</a>，或者说不要求快速，即便有足够的时间，也很难在庞大的业务中整理出思绪。当然，如果你碰到一个特别热心的老员工，事无巨细地给你讲，随时在你身边答疑解惑，那可能还好。</p><p>但很可惜，我没有碰到这样的人，在加入新公司后，带我的人几乎没花时间给我讲项目，也没给我安排可以熟悉项目的任务。</p><p>就这样的一个多月时间里，我慢慢靠<a href="https://www.zhihu.com/search?q=%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8A%9B%E9%87%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">自己的力量</a>熟悉了大概十个项目，并在过程中总结了一些方法，借此机会记录一下，分享给大家。</p><p>首先在这里强调一点，我的策略不是快速了解一个项目的具体业务，因为这个不同项目也不一样，无法总结。我的策略是大体了解整个业务线上的所有项目，大概摸清楚每个项目都是干嘛的，它们之间的关系如何，以便以后不论具体负责哪个项目都不至于找不到方向。</p><p>这样等到需要负责具体到细节的业务时，虽然依然需要花时间，但相比整体一头雾水地开始，还是简单许多的。</p><p><strong>一、必要条件</strong></p><p>我们首先要想的是，有了哪些必要条件后，给你足够的时间，你才能够完全了解整个项目？</p><p>这里说的必要条件不是“项目面对的客户是谁”、“项目用的框架是什么”这种，而是真真正正的必要条件，就好比用几条数学公理能推出整个<a href="https://www.zhihu.com/search?q=%E6%95%B0%E5%AD%A6%E4%BD%93%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">数学体系</a>一样。这里我总结的真正的必要条件只有两点：</p><ul><li>源码位置（gitlab 或 svn）；</li><li><a href="https://www.zhihu.com/search?q=%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">部署环境</a>（dev/test/online）；</li></ul><p>所谓项目，其实就是一堆代码放在了一堆机器上而已，所以这些就足够了。</p><p>当然，为了更加节约时间，最好还要有 wiki、jenkins、页面<a href="https://www.zhihu.com/search?q=%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">访问路径</a>、数据库地址。</p><p>我之所以说那两个是必要条件，是想说其实项目本质上就是这么简单的一个事，你千万不要想的太复杂。它的业务可以无限复杂，但它的本质却逃不出这些，你千万不可以糊涂。当你无从下手或者什么都不清楚的时候，就主要把源码和环境弄清楚吧，其它的都是附属品。</p><p><strong>二、从页面到<a href="https://www.zhihu.com/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">数据库</a>的线</strong></p><p>有了上面的必要条件后，我们就开始了解项目了。由于不只是一个项目，所以千万不能深入具体代码，否则你就越来越烦直到放弃，也不会有好的效果。</p><p>对某个具体项目的了解，一定要建立在对整体了解的基础上。这时我们首先为各个项目画出一条线，并标明每一个<a href="https://www.zhihu.com/search?q=%E8%8A%82%E7%82%B9&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">节点</a>的信息，就像下面的样子：</p><p>页面访问路径——前端项目——<a href="https://www.zhihu.com/search?q=%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">后台服务</a>——数据库地址</p><p>这里的一个前端项目可能对应多个后台服务，所以最终的图应该差不多是这样：</p><p><img src="https://picx.zhimg.com/80/v2-45142ad74aa18798524352106b6b5e35_720w.webp?source=1940ef5c" alt="img"></p><p>这个整理的过程，主要是让自己梳理清楚，一共有哪些项目，哪些是前端可视的，哪些是后台提供服务的，并且大致了解前端项目分别调用了哪些后台服务。通过后台服务和数据库的名称，我们能从本质上了解到这条<a href="https://www.zhihu.com/search?q=%E4%B8%9A%E5%8A%A1%E7%BA%BF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">业务线</a>提供了什么功能；从前端项目和<a href="https://www.zhihu.com/search?q=%E9%A1%B5%E9%9D%A2%E8%B7%AF%E5%BE%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">页面路径</a>，我们能了解到我们需要给用户展示什么。</p><p>注意，这个阶段我们只是见名知意，即使点开页面，连接上数据库看看，也千万别花过多的时间，因为这个阶段的重点就是仅仅知道这条业务线提的整体内容。</p><p>在此基础之上，这个图可以不断细化，比如项目部署的机器，我们可以标注在项目旁边，或者保存在 Xshell 里。此外所有非业务相关的，能查到的尽量都记录下来。这个真的为以后找各种东西提供太多方便了。如果不在这一步这样做，别看你现在节约了时间，但等到以后查找相关东西的时候，时间加起来将会是<a href="https://www.zhihu.com/search?q=%E5%A4%A9%E6%96%87%E6%95%B0%E5%AD%97&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">天文数字</a>了。</p><p>这里关于整理项目部署的机器还有个小插曲，跟大家分享一下。</p><p>由于这部分的信息没人会一个一个地告诉你，就算有也不可能说的特别全。所以我是借助<a href="https://www.zhihu.com/search?q=jenkins&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">jenkins</a>来整理的。项目部署都需要用到 jenkins，只要查看 jenkins 配置的命令，就可以把部署环境一一整理出来，这个我认为是最全而且最新的。</p><p>不要和我说查 wiki，如果公司 wiki 都写的这么全，我估计就没这篇文章什么事了。当时我的 jenkins 权限特别少，只能看一部分项目，而且还只能执行，不能看配置，带我的人也是抠门，每次问他都给我开通所需要的项目的执行权限，多一点都不给。后来我也懒得问了，由于 jenkins 机器大家都可以用<a href="https://www.zhihu.com/search?q=root%E6%9D%83%E9%99%90&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">root 权限</a>登陆，所以我进入 jenkins 的<a href="https://www.zhihu.com/search?q=%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">配置文件</a>config.xml，给我自己添加了一个 admin 权限，重启 jenkins，再打开之后屏幕满满的项目都出来了，而且都可以查看和修改，畅通无阻。我就这样通过一个个 jenkins 的配置，整理了部署的机器，也看了下启动的<a href="https://www.zhihu.com/search?q=%E9%80%BB%E8%BE%91&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">逻辑</a>。</p><p><strong>三、了解项目间的关系</strong></p><p>这部分如果有老员工愿意和你说说，那最好还是了解一下。如果没有也没关系，先跳过这段，以后慢慢了解也是可以的。</p><p><strong>四、整理数据库表</strong></p><p>我们上面都是整理项目的大体框架，还没有涉及到具体的项目细节。这一部分，仍然不去涉及。</p><p>如果说站在整个业务的本质上看，业务无非就是一堆代码运行在一堆机器上；那么站在单个项目来看，一个项目无非就是对数据库的增删改查操作而已；或者从使用者的角度看，一个项目就是输入一些参数得到一些返回结果而已。</p><p>所以接下来我们要做两件事：一个是整理数据库表，一个是整理 Controller 层的所有接口。</p><ul><li>**找核心项目：**这里首先要选择一个核心项目去看，众多项目中一定有一个是核心项目，就先从这个开始看起。</li><li>**筛选核心数据表：**如果数据库的表比较少，那我们拿工具导出来表结构，一个个看就行了，这个不难。但如果数据库表特别多，我们首先要将表名全部导出，筛选出那些核心的表。这里导出表名、筛选表以及后面的<a href="https://www.zhihu.com/search?q=%E5%88%86%E6%9E%90%E8%A1%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">分析表</a>字段，不妨给自己做个工具，我在遇到一些很麻烦的或者感觉以后还可以通用的事情时，就会做成一个小工具，放在一个我给自己起名为 javamate 的程序中，这些小工具逐渐积累起来你会发现今后有意想不到的方便。</li><li>**判断哪些是核心表：**不要着急，我们首先排除掉一些没用的。拿我在公司分析的系统来说，一共 150 多个表，其中有好多 copy 结尾的是备份，flow 结尾的是流水，rel 结尾的是<a href="https://www.zhihu.com/search?q=%E4%B8%AD%E9%97%B4%E5%85%B3%E8%81%94%E8%A1%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">中间关联表</a>，statistics 结尾的是<a href="https://www.zhihu.com/search?q=%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1%E8%A1%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">数据统计表</a>，log 结尾的是日志表，config 结尾的是配置表，等等。排除掉这些对核心业务理解无影响的表之后，所剩的也就 20 来张表，再根据它们的名字，可以看出好多表是属于一类的，比如<a href="https://www.zhihu.com/search?q=order%E8%A1%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">order 表</a>就有各种 order，按类别再分出来也就四五类，再分析起来就不难了。当然如果是更大的<a href="https://www.zhihu.com/search?q=%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">体系结构</a>，那就要再不断做拆解。</li><li>**找出表之间的关系：**在具体分析这些核心表字段之前，还要做一件事就是找出表中间的关系。如果表 b 中有个字段，比如叫 a.id，那么 b 和 a 就是一对多的关系；如果两个表有<a href="https://www.zhihu.com/search?q=rel%E4%B8%AD%E9%97%B4%E8%A1%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">rel 中间表</a>，那二者就是多对多的关系，起码从逻辑上讲是这样的。这个<a href="https://www.zhihu.com/search?q=%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">分析过程</a>我也是做了个小工具，通过程序来判断的。</li></ul><p>到此，你就对整体的<a href="https://www.zhihu.com/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">数据库结构</a>有所了解了。根据表名也能对表的大致内容有所了解，接下来就是针对具体的表，看里面具体的字段和前人给出的备注，这个过程就没有技巧了，要耐心，要慢慢熬。</p><p><strong>五、整理 Controller 层接口</strong></p><p>当对数据库表做了以上的了解后，你基本上对这个系统能提供什么服务了解得差不多了。这个时候不论你的代码长什么样子，数据库摆在那里，能提供的服务差不多就已经出来了，对有经验的人来讲，代码的<a href="https://www.zhihu.com/search?q=%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">业务逻辑</a>也大致能猜到个八九分。</p><p>我们梳理了大后方，那接下来就是把最前端和别人交互的部分搞清楚，这样掐头去尾，整个项目就解剖的差不多了。</p><p>这里我也给自己做了个小工具，扫描出所有的 controller 层的接口，展示出方法名、路径名、<a href="https://www.zhihu.com/search?q=%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">参数列表</a>和<a href="https://www.zhihu.com/search?q=%E8%BF%94%E5%9B%9E%E5%80%BC&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">返回值</a>等，但可惜没能展示注释，有大神有想法的话也欢迎帮我想想。</p><p>和数据库一样，如果接口很少，那么一个个看；如果特别多，还是先找出比较核心的几个方法研究。</p><p>这里我用的是<a href="https://www.zhihu.com/search?q=postman&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">postman</a>，把要研究的接口访问保存起来，并且添加访问成功和失败的 Example。我推荐自己开发的时候也把 postman 用起来，越详细越好，postman 不只是可以简简单单访问你的接口，还能做批量测试，还可以生成 api 文档用于和前端交互。这样你不但测试了自己的接口，还省的写文档了。而且 postman 还有个好处就是可以给自己的接口 mock 一个服务，这样即使你的接口挂了，或者接口根本就没写好，也可以让前端人员先访问你的<a href="https://www.zhihu.com/search?q=mock&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">mock</a>，完全不影响前端边测试边开发，这才是真正的<a href="https://www.zhihu.com/search?q=%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">前后端分离</a>嘛。</p><p><strong>六、重新理清项目间的关系</strong></p><p>好了，这时候每个项目你已经大致了解，最起码调用的效果，数据库所能提供的服务，你是清楚的。至此，就要<a href="https://www.zhihu.com/search?q=%E9%87%8D%E6%96%B0%E6%95%B4%E7%90%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">重新整理</a>下项目之间的关系了。</p><ul><li>根据之前的接口名称，详细了解下项目间的调用关系。理不清的部分去问老员工，这时候你带着自己的了解问，他们也能给出更多的信息。</li><li>看看每个项目中用到的<a href="https://www.zhihu.com/search?q=%E4%B8%AD%E9%97%B4%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">中间件</a>，主要是 mq 服务，看看谁是生产者，谁是消费者，以此来了解关系。</li><li>这时你应该已经开了好几轮的周会了，接下来的周会你应该能听懂部分内容。根据每个人的描述和最新的几组需求，逐渐摸清楚现在项目面临的问题，以及哪个项目是核心，哪个项目是辅助，哪个项目是以稳定安全为主的。</li></ul><p>到此为止，你对整条业务线就有了大致的了解，接下来就可以结合你具体负责的内容、领导安排你做的方向，去看具体的<a href="https://www.zhihu.com/search?q=%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">业务代码</a>了。</p><p>虽然之后的步骤依然需要你深入其中，事无巨细地了解具体内容，但此时，你通过前面的努力，已经可以站在一定的高度看每一个项目了，虽然你细节上还是不了解，但这是完全不同的。</p><p>在研究具体业务代码的同时，不断地跳出来看整条业务线的框架，修正之前由于不了解具体业务而理解错误的架构。</p><p>长此以往，你一定会在某个项目中脱颖而出，让大家认识到你的全局视野，这也是走出老是写增删改查代码怪圈的一个途径。慢慢会有人意识到，你对项目的理解总能站在全局的视野，很多需要跨项目去做的业务，也会自然而然想到你，慢慢地，你会接触到更为核心的东西，成为<a href="https://www.zhihu.com/search?q=%E6%9E%B6%E6%9E%84%E5%B8%88&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1406106730%7D" target="_blank" rel="noreferrer">架构师</a>，或者去转向产品，转向管理。</p><p>这就是我总结的了解项目的过程，我工作年限不多，经验上还不够丰富，希望大佬们多多留言指点，提出问题，共同进步。</p><p>来源：<a href="https://www.toutiao.com/article/6599078103778066947" target="_blank" rel="noreferrer">https://www.toutiao.com/article/6599078103778066947</a></p>',48),c=[h];function p(o,_,i,n,E,u){return e(),a("div",null,c)}const w=r(t,[["render",p]]);export{m as __pageData,w as default};
