import{_ as s,o,c as e,Q as a}from"./chunks/framework.419948d5.js";const m=JSON.parse('{"title":"提升开发体验","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/webpack/chapter2/31.SourceMap提升开发体验.md","filePath":"program/frontend/webpack/chapter2/31.SourceMap提升开发体验.md","lastUpdated":1694391214000}'),n={name:"program/frontend/webpack/chapter2/31.SourceMap提升开发体验.md"},p=a(`<h1 id="提升开发体验" tabindex="-1">提升开发体验 <a class="header-anchor" href="#提升开发体验" aria-label="Permalink to &quot;提升开发体验&quot;">​</a></h1><p>首先是SourceMap</p><h2 id="为什么" tabindex="-1">为什么 <a class="header-anchor" href="#为什么" aria-label="Permalink to &quot;为什么&quot;">​</a></h2><p>开发时我们运行的代码是经过 webpack 编译后的，例如下面这个样子：</p><pre><code>\`\`\`javascript
/*
* ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).
* This devtool is neither made for production nor for readable output files.
* It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.
* If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
* or disable the default devtool with &quot;devtool: false&quot;.
* If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).
*/
/******/ (() =&gt; { // webpackBootstrap
/******/ 	&quot;use strict&quot;;
/******/ 	var __webpack_modules__ = ({

/***/ &quot;./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/less/index.less&quot;:
/*!**********************************************************************************************************!*\\
!*** ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/less/index.less ***!
\\**********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) =&gt; {

eval(&quot;__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\&quot;default\\&quot;: () =&gt; (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ });\\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \\&quot;./node_modules/css-loader/dist/runtime/noSourceMaps.js\\&quot;);\\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \\&quot;./node_modules/css-loader/dist/runtime/api.js\\&quot;);\\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\\n// Imports\\n\\n\\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\\n// Module\\n___CSS_LOADER_EXPORT___.push([module.id, \\&quot;.box2 {\\\\n  width: 100px;\\\\n  height: 100px;\\\\n  background-color: deeppink;\\\\n}\\\\n\\&quot;, \\&quot;\\&quot;]);\\n// Exports\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\\n\\n\\n//# sourceURL=webpack://webpack5/./src/less/index.less?./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js&quot;);

/***/ }),
// 其他省略
\`\`\`
</code></pre><p>所有 css 和 js 合并成了一个文件，并且多了其他代码。此时如果代码运行出错那么提示代码错误位置我们是看不懂的。一旦将来开发代码文件很多，那么很难去发现错误出现在哪里。</p><p>所以我们需要更加准确的<strong>错误提示</strong>，来帮助我们更好的开发代码。</p><blockquote><p>之前学过，开发环境下如果配置了开发服务器，项目中我们是看不到打包后输出的文件的，但是调试时通过chromn的devtools的Source选项卡是可以看到的 默认情况下程序报错，位置报的是编译后的文件，编译后的文件是通过压缩的，很多东西我们是看不懂的； 1.调试更友好；2.报错更精准；</p></blockquote><h2 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h2><p>SourceMap（源代码映射）是一个用来生成源代码与构建后代码一一映射的文件的方案。</p><p>它会生成一个 xxx.map 文件，里面包含源代码和构建后代码每一行、每一列的映射关系。当构建后代码出错了，会通过 xxx.map 文件，从构建后代码出错位置找到映射后源代码出错位置，从而让浏览器提示源代码文件出错位置，帮助我们更快的找到错误根源。</p><blockquote><p>我们只需要通过配置生成map文件，浏览器会自动帮助我们通过map文件查找代码出错的位置</p></blockquote><h2 id="怎么用" tabindex="-1">怎么用 <a class="header-anchor" href="#怎么用" aria-label="Permalink to &quot;怎么用&quot;">​</a></h2><p>通过查看<a href="https://webpack.docschina.org/configuration/devtool/" target="_blank" rel="noreferrer">Webpack DevTool</a>可知，SourceMap 的值有很多种情况.</p><p>但实际开发时我们只需要关注两种情况即可：</p><ul><li><p>开发模式：<code>cheap-module-source-map</code></p><ul><li><p>优点：打包编译速度快，只包含行映射</p></li><li><p>缺点：没有列映射</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 其他省略</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode: </span><span style="color:#9ECBFF;">&quot;development&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    devtool: </span><span style="color:#9ECBFF;">&quot;cheap-module-source-map&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 其他省略</span></span>
<span class="line"><span style="color:#24292E;">    mode: </span><span style="color:#032F62;">&quot;development&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    devtool: </span><span style="color:#032F62;">&quot;cheap-module-source-map&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></li></ul></li><li><p>生产模式：<code>source-map</code></p><ul><li><p>优点：包含行/列映射</p></li><li><p>缺点：打包编译速度更慢</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 其他省略</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode: </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    devtool: </span><span style="color:#9ECBFF;">&quot;source-map&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 其他省略</span></span>
<span class="line"><span style="color:#24292E;">    mode: </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    devtool: </span><span style="color:#032F62;">&quot;source-map&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></li></ul></li></ul><blockquote><p>开发环境下，我们写代码一般会使用格式化，基本上一行的代码不会太多，所以只要我们知道哪一行出了问题，可以很快地找到出错的位置，而不用估计出错的列的位置 生产环境下，代码会进行压缩，压缩的代码只有一行，此时就需要行和列同时映射才能准确定位出错的位置 devtool配置项和5大核心概念平级 每次修改配置文件都需要重启开发服务器</p></blockquote>`,17),l=[p];function t(r,_,c,d,u,i){return o(),e("div",null,l)}const y=s(n,[["render",t]]);export{m as __pageData,y as default};
