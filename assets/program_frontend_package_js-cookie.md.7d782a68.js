import{_ as e,o as a,c as s,Q as o}from"./chunks/framework.419948d5.js";const k=JSON.parse('{"title":"js-cookie","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/package/js-cookie.md","filePath":"program/frontend/package/js-cookie.md","lastUpdated":1694080477000}'),n={name:"program/frontend/package/js-cookie.md"},t=o(`<h1 id="js-cookie" tabindex="-1">js-cookie <a class="header-anchor" href="#js-cookie" aria-label="Permalink to &quot;js-cookie&quot;">​</a></h1><p><a href="https://www.npmjs.com/package/js-cookie" target="_blank" rel="noreferrer">npm 链接</a><a href="https://github.com/js-cookie/js-cookie/tree/latest#readme" target="_blank" rel="noreferrer">github 链接</a></p><blockquote><p>用于处理 Cookie 的简单、轻量级 JavaScript API</p></blockquote><ul><li>适用于所有浏览器</li><li>接受任何字符（指 cookie 名）</li><li>通过了大量的测试</li><li>无依赖</li><li>支持 ESM</li><li>支持 AMD/CommonJS</li><li>符合<a href="https://tools.ietf.org/html/rfc6265" target="_blank" rel="noreferrer">RFC 6265</a> 规范</li><li>Useful <a href="https://github.com/js-cookie/js-cookie/wiki" target="_blank" rel="noreferrer">Wiki</a></li><li>启用自定义编码/解码</li><li>体积小于800字节</li></ul><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><h3 id="npm" tabindex="-1">NPM <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;NPM&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm i js-cookie</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm i js-cookie</span></span></code></pre></div><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><p>创建一个在整个网站上有效的cookie：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.set(&#39;name&#39;, &#39;value&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.set(&#39;name&#39;, &#39;value&#39;)</span></span></code></pre></div><p>创建一个从现在起7天内过期的cookie，在整个网站上有效：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { expires: 7 })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { expires: 7 })</span></span></code></pre></div><p>创建一个过期cookie，对当前页面的路径有效：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { expires: 7, path: &#39;&#39; })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { expires: 7, path: &#39;&#39; })</span></span></code></pre></div><p>读取 cookie:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.get(&#39;name&#39;) // =&gt; &#39;value&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.get(&#39;nothing&#39;) // =&gt; undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.get(&#39;name&#39;) // =&gt; &#39;value&#39;</span></span>
<span class="line"><span style="color:#24292e;">Cookies.get(&#39;nothing&#39;) // =&gt; undefined</span></span></code></pre></div><p>读取所有可见 cookie：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.get() // =&gt; { name: &#39;value&#39; }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.get() // =&gt; { name: &#39;value&#39; }</span></span></code></pre></div><p><em>Note: It is not possible to read a particular cookie by passing one of the cookie attributes (which may or may not have been used when writing the cookie in question):</em> 注意：通过传递其中一个cookie属性（在编写有问题的cookie时可能使用过，也可能没有使用过），无法读取特定cookie：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.get(&#39;foo&#39;, { domain: &#39;sub.example.com&#39; }) // \`domain\` won&#39;t have any effect...!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.get(&#39;foo&#39;, { domain: &#39;sub.example.com&#39; }) // \`domain\` won&#39;t have any effect...!</span></span></code></pre></div><p>The cookie with the name <code>foo</code> will only be available on <code>.get()</code> if it&#39;s visible from where the code is called; the domain and/or path attribute will not have an effect when reading.</p><p>Delete cookie:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.remove(&#39;name&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.remove(&#39;name&#39;)</span></span></code></pre></div><p>Delete a cookie valid to the path of the current page:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { path: &#39;&#39; })</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.remove(&#39;name&#39;) // fail!</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.remove(&#39;name&#39;, { path: &#39;&#39; }) // removed!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { path: &#39;&#39; })</span></span>
<span class="line"><span style="color:#24292e;">Cookies.remove(&#39;name&#39;) // fail!</span></span>
<span class="line"><span style="color:#24292e;">Cookies.remove(&#39;name&#39;, { path: &#39;&#39; }) // removed!</span></span></code></pre></div><p><em>IMPORTANT! When deleting a cookie and you&#39;re not relying on the <a href="https://github.com/js-cookie/js-cookie/tree/latest#cookie-attributes" target="_blank" rel="noreferrer">default attributes</a>, you must pass the exact same path and domain attributes that were used to set the cookie:</em></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.remove(&#39;name&#39;, { path: &#39;&#39;, domain: &#39;.yourdomain.com&#39; })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.remove(&#39;name&#39;, { path: &#39;&#39;, domain: &#39;.yourdomain.com&#39; })</span></span></code></pre></div><p><em>Note: Removing a nonexistent cookie neither raises any exception nor returns any value.</em></p><h2 id="namespace-conflicts" tabindex="-1">Namespace conflicts <a class="header-anchor" href="#namespace-conflicts" aria-label="Permalink to &quot;Namespace conflicts&quot;">​</a></h2><p>If there is any danger of a conflict with the namespace <code>Cookies</code>, the <code>noConflict</code> method will allow you to define a new namespace and preserve the original one. This is especially useful when running the script on third party sites e.g. as part of a widget or SDK.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// Assign the js-cookie api to a different variable and restore the original &quot;window.Cookies&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">var Cookies2 = Cookies.noConflict()</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies2.set(&#39;name&#39;, &#39;value&#39;)</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292e;">// Assign the js-cookie api to a different variable and restore the original &quot;window.Cookies&quot;</span></span>
<span class="line"><span style="color:#24292e;">var Cookies2 = Cookies.noConflict()</span></span>
<span class="line"><span style="color:#24292e;">Cookies2.set(&#39;name&#39;, &#39;value&#39;)</span></span></code></pre></div><p><em>Note: The <code>.noConflict</code> method is not necessary when using AMD or CommonJS, thus it is not exposed in those environments.</em></p><h2 id="encoding" tabindex="-1">Encoding <a class="header-anchor" href="#encoding" aria-label="Permalink to &quot;Encoding&quot;">​</a></h2><p>This project is <a href="http://tools.ietf.org/html/rfc6265#section-4.1.1" target="_blank" rel="noreferrer">RFC 6265</a> compliant. All special characters that are not allowed in the cookie-name or cookie-value are encoded with each one&#39;s UTF-8 Hex equivalent using <a href="http://en.wikipedia.org/wiki/Percent-encoding" target="_blank" rel="noreferrer">percent-encoding</a>. The only character in cookie-name or cookie-value that is allowed and still encoded is the percent <code>%</code> character, it is escaped in order to interpret percent input as literal. Please note that the default encoding/decoding strategy is meant to be interoperable <a href="https://github.com/js-cookie/js-cookie/pull/200#discussion_r63270778" target="_blank" rel="noreferrer">only between cookies that are read/written by js-cookie</a>. To override the default encoding/decoding strategy you need to use a <a href="https://github.com/js-cookie/js-cookie/tree/latest#converters" target="_blank" rel="noreferrer">converter</a>.</p><p><em>Note: According to <a href="https://tools.ietf.org/html/rfc6265#section-6.1" target="_blank" rel="noreferrer">RFC 6265</a>, your cookies may get deleted if they are too big or there are too many cookies in the same domain, <a href="https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#why-are-my-cookies-being-deleted" target="_blank" rel="noreferrer">more details here</a>.</em></p><h2 id="cookie-attributes" tabindex="-1">Cookie Attributes <a class="header-anchor" href="#cookie-attributes" aria-label="Permalink to &quot;Cookie Attributes&quot;">​</a></h2><p>Cookie attribute defaults can be set globally by creating an instance of the api via <code>withAttributes()</code>, or individually for each call to <code>Cookies.set(...)</code> by passing a plain object as the last argument. Per-call attributes override the default attributes.</p><h3 id="expires" tabindex="-1">expires <a class="header-anchor" href="#expires" aria-label="Permalink to &quot;expires&quot;">​</a></h3><p>Define when the cookie will be removed. Value must be a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number" target="_blank" rel="noreferrer"><code>Number</code></a> which will be interpreted as days from time of creation or a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noreferrer"><code>Date</code></a> instance. If omitted, the cookie becomes a session cookie.</p><p>To create a cookie that expires in less than a day, you can check the <a href="https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#expire-cookies-in-less-than-a-day" target="_blank" rel="noreferrer">FAQ on the Wiki</a>.</p><p><strong>Default:</strong> Cookie is removed when the user closes the browser.</p><p><strong>Examples:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { expires: 365 })</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.get(&#39;name&#39;) // =&gt; &#39;value&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.remove(&#39;name&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { expires: 365 })</span></span>
<span class="line"><span style="color:#24292e;">Cookies.get(&#39;name&#39;) // =&gt; &#39;value&#39;</span></span>
<span class="line"><span style="color:#24292e;">Cookies.remove(&#39;name&#39;)</span></span></code></pre></div><h3 id="path" tabindex="-1">path <a class="header-anchor" href="#path" aria-label="Permalink to &quot;path&quot;">​</a></h3><p>A <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer"><code>String</code></a> indicating the path where the cookie is visible.</p><p><strong>Default:</strong> <code>/</code></p><p><strong>Examples:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { path: &#39;&#39; })</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.get(&#39;name&#39;) // =&gt; &#39;value&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.remove(&#39;name&#39;, { path: &#39;&#39; })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { path: &#39;&#39; })</span></span>
<span class="line"><span style="color:#24292e;">Cookies.get(&#39;name&#39;) // =&gt; &#39;value&#39;</span></span>
<span class="line"><span style="color:#24292e;">Cookies.remove(&#39;name&#39;, { path: &#39;&#39; })</span></span></code></pre></div><p><strong>Note regarding Internet Explorer:</strong></p><blockquote><p>Due to an obscure bug in the underlying WinINET InternetGetCookie implementation, IE’s document.cookie will not return a cookie if it was set with a path attribute containing a filename.</p></blockquote><p>(From <a href="http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx" target="_blank" rel="noreferrer">Internet Explorer Cookie Internals (FAQ)</a>)</p><p>This means one cannot set a path using <code>window.location.pathname</code> in case such pathname contains a filename like so: <code>/check.html</code> (or at least, such cookie cannot be read correctly).</p><p>In fact, you should never allow untrusted input to set the cookie attributes or you might be exposed to a <a href="https://github.com/js-cookie/js-cookie/issues/396" target="_blank" rel="noreferrer">XSS attack</a>.</p><h3 id="domain" tabindex="-1">domain <a class="header-anchor" href="#domain" aria-label="Permalink to &quot;domain&quot;">​</a></h3><p>A <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer"><code>String</code></a> indicating a valid domain where the cookie should be visible. The cookie will also be visible to all subdomains.</p><p><strong>Default:</strong> Cookie is visible only to the domain or subdomain of the page where the cookie was created, except for Internet Explorer (see below).</p><p><strong>Examples:</strong></p><p>Assuming a cookie that is being created on <code>site.com</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { domain: &#39;subdomain.site.com&#39; })</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.get(&#39;name&#39;) // =&gt; undefined (need to read at &#39;subdomain.site.com&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { domain: &#39;subdomain.site.com&#39; })</span></span>
<span class="line"><span style="color:#24292e;">Cookies.get(&#39;name&#39;) // =&gt; undefined (need to read at &#39;subdomain.site.com&#39;)</span></span></code></pre></div><p><strong>Note regarding Internet Explorer default behavior:</strong></p><blockquote><p>Q3: If I don’t specify a DOMAIN attribute (for) a cookie, IE sends it to all nested subdomains anyway? A: Yes, a cookie set on example.com will be sent to sub2.sub1.example.com. Internet Explorer differs from other browsers in this regard.</p></blockquote><p>(From <a href="http://blogs.msdn.com/b/ieinternals/archive/2009/08/20/wininet-ie-cookie-internals-faq.aspx" target="_blank" rel="noreferrer">Internet Explorer Cookie Internals (FAQ)</a>)</p><p>This means that if you omit the <code>domain</code> attribute, it will be visible for a subdomain in IE.</p><h3 id="secure" tabindex="-1">secure <a class="header-anchor" href="#secure" aria-label="Permalink to &quot;secure&quot;">​</a></h3><p>Either <code>true</code> or <code>false</code>, indicating if the cookie transmission requires a secure protocol (https).</p><p><strong>Default:</strong> No secure protocol requirement.</p><p><strong>Examples:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { secure: true })</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.get(&#39;name&#39;) // =&gt; &#39;value&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.remove(&#39;name&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { secure: true })</span></span>
<span class="line"><span style="color:#24292e;">Cookies.get(&#39;name&#39;) // =&gt; &#39;value&#39;</span></span>
<span class="line"><span style="color:#24292e;">Cookies.remove(&#39;name&#39;)</span></span></code></pre></div><h3 id="samesite" tabindex="-1">sameSite <a class="header-anchor" href="#samesite" aria-label="Permalink to &quot;sameSite&quot;">​</a></h3><p>A <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer"><code>String</code></a>, allowing to control whether the browser is sending a cookie along with cross-site requests.</p><p>Default: not set.</p><p><strong>Note that more recent browsers are making &quot;Lax&quot; the default value even without specifiying anything here.</strong></p><p><strong>Examples:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { sameSite: &#39;strict&#39; })</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.get(&#39;name&#39;) // =&gt; &#39;value&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">Cookies.remove(&#39;name&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.set(&#39;name&#39;, &#39;value&#39;, { sameSite: &#39;strict&#39; })</span></span>
<span class="line"><span style="color:#24292e;">Cookies.get(&#39;name&#39;) // =&gt; &#39;value&#39;</span></span>
<span class="line"><span style="color:#24292e;">Cookies.remove(&#39;name&#39;)</span></span></code></pre></div><h3 id="setting-up-defaults" tabindex="-1">Setting up defaults <a class="header-anchor" href="#setting-up-defaults" aria-label="Permalink to &quot;Setting up defaults&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">const api = Cookies.withAttributes({ path: &#39;/&#39;, domain: &#39;.example.com&#39; })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const api = Cookies.withAttributes({ path: &#39;/&#39;, domain: &#39;.example.com&#39; })</span></span></code></pre></div><h2 id="converters" tabindex="-1">Converters <a class="header-anchor" href="#converters" aria-label="Permalink to &quot;Converters&quot;">​</a></h2><h3 id="read" tabindex="-1">Read <a class="header-anchor" href="#read" aria-label="Permalink to &quot;Read&quot;">​</a></h3><p>Create a new instance of the api that overrides the default decoding implementation. All get methods that rely in a proper decoding to work, such as <code>Cookies.get()</code> and <code>Cookies.get(&#39;name&#39;)</code>, will run the given converter for each cookie. The returned value will be used as the cookie value.</p><p>Example from reading one of the cookies that can only be decoded using the <code>escape</code> function:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">document.cookie = &#39;escaped=%u5317&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">document.cookie = &#39;default=%E5%8C%97&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">var cookies = Cookies.withConverter({</span></span>
<span class="line"><span style="color:#e1e4e8;">  read: function (value, name) {</span></span>
<span class="line"><span style="color:#e1e4e8;">    if (name === &#39;escaped&#39;) {</span></span>
<span class="line"><span style="color:#e1e4e8;">      return unescape(value)</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;">    // Fall back to default for all other cookies</span></span>
<span class="line"><span style="color:#e1e4e8;">    return Cookies.converter.read(value, name)</span></span>
<span class="line"><span style="color:#e1e4e8;">  }</span></span>
<span class="line"><span style="color:#e1e4e8;">})</span></span>
<span class="line"><span style="color:#e1e4e8;">cookies.get(&#39;escaped&#39;) // 北</span></span>
<span class="line"><span style="color:#e1e4e8;">cookies.get(&#39;default&#39;) // 北</span></span>
<span class="line"><span style="color:#e1e4e8;">cookies.get() // { escaped: &#39;北&#39;, default: &#39;北&#39; }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">document.cookie = &#39;escaped=%u5317&#39;</span></span>
<span class="line"><span style="color:#24292e;">document.cookie = &#39;default=%E5%8C%97&#39;</span></span>
<span class="line"><span style="color:#24292e;">var cookies = Cookies.withConverter({</span></span>
<span class="line"><span style="color:#24292e;">  read: function (value, name) {</span></span>
<span class="line"><span style="color:#24292e;">    if (name === &#39;escaped&#39;) {</span></span>
<span class="line"><span style="color:#24292e;">      return unescape(value)</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">    // Fall back to default for all other cookies</span></span>
<span class="line"><span style="color:#24292e;">    return Cookies.converter.read(value, name)</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span>
<span class="line"><span style="color:#24292e;">})</span></span>
<span class="line"><span style="color:#24292e;">cookies.get(&#39;escaped&#39;) // 北</span></span>
<span class="line"><span style="color:#24292e;">cookies.get(&#39;default&#39;) // 北</span></span>
<span class="line"><span style="color:#24292e;">cookies.get() // { escaped: &#39;北&#39;, default: &#39;北&#39; }</span></span></code></pre></div><h3 id="write" tabindex="-1">Write <a class="header-anchor" href="#write" aria-label="Permalink to &quot;Write&quot;">​</a></h3><p>Create a new instance of the api that overrides the default encoding implementation:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Cookies.withConverter({</span></span>
<span class="line"><span style="color:#e1e4e8;">  write: function (value, name) {</span></span>
<span class="line"><span style="color:#e1e4e8;">    return value.toUpperCase()</span></span>
<span class="line"><span style="color:#e1e4e8;">  }</span></span>
<span class="line"><span style="color:#e1e4e8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cookies.withConverter({</span></span>
<span class="line"><span style="color:#24292e;">  write: function (value, name) {</span></span>
<span class="line"><span style="color:#24292e;">    return value.toUpperCase()</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span>
<span class="line"><span style="color:#24292e;">})</span></span></code></pre></div><h2 id="typescript-declarations" tabindex="-1">TypeScript declarations <a class="header-anchor" href="#typescript-declarations" aria-label="Permalink to &quot;TypeScript declarations&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm i @types/js-cookie</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm i @types/js-cookie</span></span></code></pre></div><h2 id="server-side-integration" tabindex="-1">Server-side integration <a class="header-anchor" href="#server-side-integration" aria-label="Permalink to &quot;Server-side integration&quot;">​</a></h2><p>Check out the <a href="https://github.com/js-cookie/js-cookie/blob/latest/SERVER_SIDE.md" target="_blank" rel="noreferrer">Servers Docs</a></p><h2 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h2><p>Check out the <a href="https://github.com/js-cookie/js-cookie/blob/latest/CONTRIBUTING.md" target="_blank" rel="noreferrer">Contributing Guidelines</a></p><h2 id="security" tabindex="-1">Security <a class="header-anchor" href="#security" aria-label="Permalink to &quot;Security&quot;">​</a></h2><p>For vulnerability reports, send an e-mail to <code>js-cookie at googlegroups dot com</code></p><h2 id="releasing" tabindex="-1">Releasing <a class="header-anchor" href="#releasing" aria-label="Permalink to &quot;Releasing&quot;">​</a></h2><p>Releasing should be done via the <code>Release</code> GitHub Actions workflow, so that published packages on npmjs.com have package provenance.</p><p>GitHub releases are created as a draft and need to be published manually! (This is so we are able to craft suitable release notes before publishing.)</p><h2 id="supporters" tabindex="-1">Supporters <a class="header-anchor" href="#supporters" aria-label="Permalink to &quot;Supporters&quot;">​</a></h2><p><a href="https://www.browserstack.com/" target="_blank" rel="noreferrer"><img src="https://raw.githubusercontent.com/wiki/js-cookie/js-cookie/Browserstack-logo%402x.png" alt="img"></a></p><p>Many thanks to <a href="https://www.browserstack.com/" target="_blank" rel="noreferrer">BrowserStack</a> for providing unlimited browser testing free of cost.</p><h2 id="authors" tabindex="-1">Authors <a class="header-anchor" href="#authors" aria-label="Permalink to &quot;Authors&quot;">​</a></h2><ul><li><a href="https://github.com/carhartl" target="_blank" rel="noreferrer">Klaus Hartl</a></li><li><a href="https://github.com/FagnerMartinsBrack" target="_blank" rel="noreferrer">Fagner Brack</a></li><li>And awesome <a href="https://github.com/js-cookie/js-cookie/graphs/contributors" target="_blank" rel="noreferrer">contributors</a></li></ul>`,100),i=[t];function l(r,p,c,d,h,u){return a(),s("div",null,i)}const m=e(n,[["render",l]]);export{k as __pageData,m as default};
