import{_ as e,o as a,c as t,Q as r}from"./chunks/framework.19358895.js";const m=JSON.parse('{"title":"中间件","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter3/9.中间件.md","filePath":"program/frontend/Node/chapter3/9.中间件.md","lastUpdated":1697287289000}'),o={name:"program/frontend/Node/chapter3/9.中间件.md"},n=r('<h1 id="中间件" tabindex="-1">中间件 <a class="header-anchor" href="#中间件" aria-label="Permalink to &quot;中间件&quot;">​</a></h1><h2 id="什么是中间件" tabindex="-1">什么是中间件 <a class="header-anchor" href="#什么是中间件" aria-label="Permalink to &quot;什么是中间件&quot;">​</a></h2><p>中间件（Middleware）本质是一个回调函数，所以也叫中间件函数</p><p>中间件可以像路由回调一样去访问请求对象（request）和响应对象（response）</p><p>即，中间件可以获取请求内容，还可以对响应结果进行设置。</p><h2 id="中间件的作用" tabindex="-1">中间件的作用 <a class="header-anchor" href="#中间件的作用" aria-label="Permalink to &quot;中间件的作用&quot;">​</a></h2><p>中间件的作用就是<strong>使用函数封装公共操作，简化代码</strong></p><h2 id="中间件的类型" tabindex="-1">中间件的类型 <a class="header-anchor" href="#中间件的类型" aria-label="Permalink to &quot;中间件的类型&quot;">​</a></h2><ul><li><p>全局中间件</p><p>请求从浏览器发到服务器上时，全局中间件就会执行。全局中间件执行完，还会去执行对应的路由回调。</p><p>只要是请求发送到了服务器，全局中间件都会执行。</p></li><li><p>路由中间件</p><p>请求从浏览器发到服务器上，匹配到了对应的路由，路由中间件就会执行。路由中间件触发是和路由绑定的。</p></li></ul><blockquote><p>使用中间件可以在触发响应之前对请求做一些处理，全局中间件对所有请求进行处理，路由中间件对对应路由的响应进行处理</p></blockquote>',10),p=[n];function d(l,s,i,c,_,h){return a(),t("div",null,p)}const f=e(o,[["render",d]]);export{m as __pageData,f as default};
