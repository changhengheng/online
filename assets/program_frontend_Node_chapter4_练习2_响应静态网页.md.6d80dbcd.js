import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.19358895.js";const h=JSON.parse('{"title":"响应静态网页","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter4/练习2_响应静态网页.md","filePath":"program/frontend/Node/chapter4/练习2_响应静态网页.md","lastUpdated":1697452647000}'),l={name:"program/frontend/Node/chapter4/练习2_响应静态网页.md"},p=e(`<h1 id="响应静态网页" tabindex="-1">响应静态网页 <a class="header-anchor" href="#响应静态网页" aria-label="Permalink to &quot;响应静态网页&quot;">​</a></h1><h2 id="res-render-view-locals-callback" tabindex="-1">res.render(view [, locals] [, callback]) <a class="header-anchor" href="#res-render-view-locals-callback" aria-label="Permalink to &quot;res.render(view [, locals] [, callback])&quot;">​</a></h2><p>渲染 view 并将渲染的 HTML 字符串发送到客户端。</p><p>view 参数是一个字符串，它是要渲染的视图文件的文件路径。 这可以是绝对路径，也可以是相对于 views 设置的模板文件所在目录的路径。 如果路径不包含文件扩展名，则由 view engine 设置的模板引擎确定文件扩展名。 如果路径确实包含文件扩展名，那么 Express 将加载指定模板引擎的模块（通过 require()）并使用加载模块的 __express 函数渲染它。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 记账本列表</span></span>
<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/account&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 能直接写不带扩展名的list有两个必要条件：1.设置了模板引擎 2.设置了模板文件目录</span></span>
<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 记账本列表</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/account&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 能直接写不带扩展名的list有两个必要条件：1.设置了模板引擎 2.设置了模板文件目录</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;list&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="模板文件带有外部资源的问题-script标签、link标签等等" tabindex="-1">模板文件带有外部资源的问题（script标签、link标签等等） <a class="header-anchor" href="#模板文件带有外部资源的问题-script标签、link标签等等" aria-label="Permalink to &quot;模板文件带有外部资源的问题（script标签、link标签等等）&quot;">​</a></h2><p>静态资源要存放在 <code>app.use(express.static(path.join(__dirname, &#39;public&#39;)));</code> 指定的静态资源根目录下，Express 会相对于静态资源根目录查找文件（因此静态目录的名称不是 URL 的一部分），如果找不到会报404。</p><p>静态资源URL例子： <code>http://localhost:3000/css/style.css</code></p><p>相对路径大概率会报错，因为相对路径会与当前页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求，因此如果当前页面路径不是指定的静态资源根目录，就会找不到对应的静态资源，就会报404；而且协议、主机名和端口可能会发生变化，所以相对路径也不稳定。</p><p>应该使用绝对路径。</p><p>webpack项目中，模板文件引入外部资源如果使用了相对路径，打包后放到服务器上就会报错，原理和这个是一样的。</p>`,11),o=[p];function t(r,c,i,E,d,y){return a(),n("div",null,o)}const u=s(l,[["render",t]]);export{h as __pageData,u as default};
