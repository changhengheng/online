import{_ as s,o as a,c as l,Q as t}from"./chunks/framework.419948d5.js";const u=JSON.parse('{"title":"Class 与 Style 绑定","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Vue/Vue3/base/officialdocument/base/5.类与样式绑定.md","filePath":"program/frontend/Vue/Vue3/base/officialdocument/base/5.类与样式绑定.md","lastUpdated":1695205095000}'),n={name:"program/frontend/Vue/Vue3/base/officialdocument/base/5.类与样式绑定.md"},o=t(`<h1 id="class-与-style-绑定" tabindex="-1">Class 与 Style 绑定 <a class="header-anchor" href="#class-与-style-绑定" aria-label="Permalink to &quot;Class 与 Style 绑定&quot;">​</a></h1><p>在 html 中，class 和 style 都是 attribute，它们的值都是字符串。在模板语法中，我们可以和其他 attribute 一样使用 v-bind 将它们和动态的字符串绑定。</p><p>不同于其他 html attribute，模板语法增强了 class 和 style 的 v-bind 功能——它们的值可以是对象或数组。</p><h2 id="绑定-class" tabindex="-1">绑定 Class <a class="header-anchor" href="#绑定-class" aria-label="Permalink to &quot;绑定 Class&quot;">​</a></h2><h3 id="绑定对象" tabindex="-1">绑定对象 <a class="header-anchor" href="#绑定对象" aria-label="Permalink to &quot;绑定对象&quot;">​</a></h3><p>我们可以给 :class (v-bind:class 的缩写) 传递一个对象来动态切换 class：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">:class=&quot;{</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">active:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isActive</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">}&quot;&gt;&lt;/div&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">:class=&quot;{</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">active:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isActive</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">}&quot;&gt;&lt;/div&gt;</span></span></code></pre></div><p>active 是否存在取决于数据属性 isActive 的真假值。</p><p>注意：</p><ul><li>你可以在对象中写多个字段来操作多个 class。</li><li>:class 指令也可以和一般的 class attribute 共存，两者最终会渲染为一个原生的 class 属性：一个以空格分隔的元素的类名（classes）列表。</li><li>绑定的对象并不一定需要写成内联字面量的形式，也可以直接绑定一个代理对象（普通对象也有效果，但是没有响应式，无法做到动态更新）</li><li>我们也可以绑定一个返回对象的计算属性。这是一个常见且很有用的技巧</li></ul><p>当类名数据属性的真假值发生变化时，class 列表会随之更新——它是可以动态更新的。</p><h3 id="绑定数组" tabindex="-1">绑定数组 <a class="header-anchor" href="#绑定数组" aria-label="Permalink to &quot;绑定数组&quot;">​</a></h3><p>:class 也可以绑定一个数组</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">activeClass</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;active&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">errorClass</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;text-danger&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">:class=&quot;[activeClass,</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">errorClass]&quot;&gt;&lt;/div&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">activeClass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;active&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">errorClass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;text-danger&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">:class=&quot;[activeClass,</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">errorClass]&quot;&gt;&lt;/div&gt;</span></span></code></pre></div><p>注意：</p><ul><li>为保证动态更新，应该始终使用响应式数据</li><li>想在数组中有条件地渲染某个 class，可以使用三元表达式</li><li>数组中可以嵌套对象，对象语法和上述是一致的——使用真价值决定某个 class 是否生效</li></ul><h3 id="在组件上使用" tabindex="-1">在组件上使用 <a class="header-anchor" href="#在组件上使用" aria-label="Permalink to &quot;在组件上使用&quot;">​</a></h3><p>在组件山使用动态 class 时，会产生以下影响：</p><ul><li>对于只有一个根元素的组件，当你使用了 class attribute 时，这些 class 会被添加到根元素上并与该元素上已有的 class 合并。</li><li>如果你的组件有多个根元素，你将需要指定哪个根元素来接收这个 class。你可以通过组件的 $attrs 属性来实现指定<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> MyComponent 模板使用 $attrs 时 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">:class=&quot;$attrs.class&quot;&gt;Hi!&lt;/p&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&lt;span&gt;This</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">component&lt;/span&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> MyComponent 模板使用 $attrs 时 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">:class=&quot;$attrs.class&quot;&gt;Hi!&lt;/p&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">&lt;span&gt;This</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">is</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">child</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">component&lt;/span&gt;</span></span></code></pre></div><blockquote><p>$attrs 是一种组件间通信方式，用于将父组件传递给子组件的所有属性和事件监听收集起来形成一个对象，子组件内可以使用这个对象得到父组件传递的数据</p></blockquote></li></ul><h2 id="绑定-style" tabindex="-1">绑定 Style <a class="header-anchor" href="#绑定-style" aria-label="Permalink to &quot;绑定 Style&quot;">​</a></h2><p>这里的 style 专指内联样式，即 HTML 标签的 style 全局属性。</p><h3 id="绑定对象-1" tabindex="-1">绑定对象 <a class="header-anchor" href="#绑定对象-1" aria-label="Permalink to &quot;绑定对象&quot;">​</a></h3><p>:style 支持绑定 JavaScript 对象值，对应的是 HTML 元素的 style 属性。</p><p>注意：</p><ul><li>style 对象写法支持小驼峰和短横线两种写法</li><li>和动态绑定 class 一样，为了避免模板中写入太复杂的表达式，也可以绑定一个返回对象的计算属性。</li><li>可以直接绑定一个样式对象，并且为保证动态更新，应该始终使用响应式数据</li></ul><h3 id="绑定数组-1" tabindex="-1">绑定数组 <a class="header-anchor" href="#绑定数组-1" aria-label="Permalink to &quot;绑定数组&quot;">​</a></h3><p>我们还可以给 :style 绑定一个包含多个样式对象的数组。这些对象会被合并后渲染到同一元素上</p>`,27),e=[o];function p(c,r,i,y,E,d){return a(),l("div",null,e)}const f=s(n,[["render",p]]);export{u as __pageData,f as default};
