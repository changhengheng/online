import{_ as s,o as a,c as p,Q as l}from"./chunks/framework.419948d5.js";const u=JSON.parse('{"title":"前置","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/TypeScript/base/1.前置.md","filePath":"program/frontend/TypeScript/base/1.前置.md","lastUpdated":1694599481000}'),n={name:"program/frontend/TypeScript/base/1.前置.md"},o=l(`<h1 id="前置" tabindex="-1">前置 <a class="header-anchor" href="#前置" aria-label="Permalink to &quot;前置&quot;">​</a></h1><p>来源：</p><ul><li><a href="https://wangdoc.com/typescript/basic" target="_blank" rel="noreferrer">阮一峰</a></li></ul><h2 id="typescript-的编译" tabindex="-1">TypeScript 的编译 <a class="header-anchor" href="#typescript-的编译" aria-label="Permalink to &quot;TypeScript 的编译&quot;">​</a></h2><p>JavaScript 的运行环境（浏览器和 Node.js）不认识 TypeScript 代码。所以，TypeScript 项目要想运行，必须先转为 JavaScript 代码，这个代码转换的过程就叫做“编译”（compile）。</p><p>TypeScript 官方没有做运行环境，只提供编译器。编译时，会将类型声明和类型相关的代码全部删除，只留下能运行的 JavaScript 代码，并且不会改变 JavaScript 的运行结果。</p><p>因此，TypeScript 的类型检查只是编译时的类型检查，而不是运行时的类型检查。一旦代码编译为 JavaScript，运行时就不再检查类型了。</p><h2 id="值与类型" tabindex="-1">值与类型 <a class="header-anchor" href="#值与类型" aria-label="Permalink to &quot;值与类型&quot;">​</a></h2><p>学习 TypeScript 需要分清楚“值”（value）和“类型”（type）。</p><p>“类型”是针对“值”的，每一个值在 TypeScript 里面都是有类型的。</p><p>TypeScript 代码只涉及类型，不涉及值。所有跟“值”相关的处理，都由 JavaScript 完成。</p><p>TypeScript 项目里面，其实存在两种代码，一种是底层的“值代码”，另一种是上层的“类型代码”。前者使用 JavaScript 语法，后者使用 TypeScript 的类型语法。</p><p>它们是可以分离的，TypeScript 的编译过程，实际上就是把“类型代码”全部拿掉，只保留“值代码”。</p><p>编写 TypeScript 项目时，不要混淆哪些是值代码，哪些是类型代码。</p><h2 id="tsc-编译器" tabindex="-1">tsc 编译器 <a class="header-anchor" href="#tsc-编译器" aria-label="Permalink to &quot;tsc 编译器&quot;">​</a></h2><p>TypeScript 官方提供的编译器叫做 tsc，可以将 TypeScript 脚本编译成 JavaScript 脚本。本机想要编译 TypeScript 代码，必须安装 tsc。</p><p>根据约定，TypeScript 脚本文件使用.ts 后缀名，JavaScript 脚本文件使用.js 后缀名。tsc 的作用就是把.ts 脚本转变成.js 脚本。</p><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>全局安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typescript</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typescript</span></span></code></pre></div><p>检查安装是否成功：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-V</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-V</span></span></code></pre></div><p>可以全局安装 tsc，也可以在项目中将 tsc 安装为一个依赖模块。</p><h3 id="帮助信息" tabindex="-1">帮助信息 <a class="header-anchor" href="#帮助信息" aria-label="Permalink to &quot;帮助信息&quot;">​</a></h3><p>-h 或--help 参数输出帮助信息。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-h</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-h</span></span></code></pre></div><p>默认情况下，“--help”参数仅显示基本的可用选项。我们可以使用“--all”参数，查看完整的帮助信息。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--all</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--all</span></span></code></pre></div><h3 id="编译脚本" tabindex="-1">编译脚本 <a class="header-anchor" href="#编译脚本" aria-label="Permalink to &quot;编译脚本&quot;">​</a></h3><p>tsc 命令后面，加上 TypeScript 脚本文件，就可以将其编译成 JavaScript 脚本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">app.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">app.ts</span></span></code></pre></div><p>tsc 命令也可以一次编译多个 TypeScript 脚本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file1.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file2.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file3.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file1.ts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file2.ts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file3.ts</span></span></code></pre></div><p>tsc 有很多参数，可以调整编译行为。</p><ol><li><p>--outFile</p><p>如果想将多个 TypeScript 脚本编译成一个 JavaScript 文件，使用--outFile 参数。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file1.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file2.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--outFile</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">app.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file1.ts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file2.ts</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outFile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">app.js</span></span></code></pre></div><p>上面命令将 file1.ts 和 file2.ts 两个脚本编译成一个 JavaScript 文件 app.js。</p></li><li><p>--outDir</p><p>编译结果默认都保存在当前目录，--outDir 参数可以指定保存到其他目录。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">app.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--outDir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dist</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">app.ts</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outDir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dist</span></span></code></pre></div><p>上面命令会在 dist 子目录下生成 app.js。</p></li><li><p>--target</p><p>为了保证编译结果能在各种 JavaScript 引擎运行，tsc 默认会将 TypeScript 代码编译成很低版本的 JavaScript，即 3.0 版本（以 es3 表示）。这通常不是我们想要的结果。</p><p>这时可以使用--target 参数，指定编译后的 JavaScript 版本。建议使用 es2015，或者更新版本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--target</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">es2015</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">app.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--target</span><span style="color:#24292E;"> </span><span style="color:#032F62;">es2015</span><span style="color:#24292E;"> </span><span style="color:#032F62;">app.ts</span></span></code></pre></div></li></ol><h3 id="tsconfig-json" tabindex="-1">tsconfig.json <a class="header-anchor" href="#tsconfig-json" aria-label="Permalink to &quot;tsconfig.json&quot;">​</a></h3><p>TypeScript 允许将 tsc 的编译参数，写在配置文件 tsconfig.json。只要当前目录有这个文件，tsc 就会自动读取，所以运行时可以不写参数。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file1.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file2.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--outFile</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dist/app.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file1.ts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file2.ts</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outFile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dist/app.js</span></span></code></pre></div><p>上面这个命令写成 tsconfig.json，就是下面这样。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;files&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;file1.ts&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;file2.ts&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;outFile&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;dist/app.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;files&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;file1.ts&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;file2.ts&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;outFile&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;dist/app.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有了这个配置文件，编译时直接调用 tsc 命令就可以了。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tsc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tsc</span></span></code></pre></div>`,42),e=[o];function t(c,r,i,y,d,E){return a(),p("div",null,e)}const F=s(n,[["render",t]]);export{u as __pageData,F as default};
