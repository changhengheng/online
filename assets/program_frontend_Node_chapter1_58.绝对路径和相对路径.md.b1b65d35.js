import{_ as t,o as e,c as o,Q as a}from"./chunks/framework.19358895.js";const m=JSON.parse('{"title":"绝对路径和相对路径","description":"","frontmatter":{},"headers":[],"relativePath":"program/frontend/Node/chapter1/58.绝对路径和相对路径.md","filePath":"program/frontend/Node/chapter1/58.绝对路径和相对路径.md","lastUpdated":1697697546000}'),d={name:"program/frontend/Node/chapter1/58.绝对路径和相对路径.md"},r=a('<h1 id="绝对路径和相对路径" tabindex="-1">绝对路径和相对路径 <a class="header-anchor" href="#绝对路径和相对路径" aria-label="Permalink to &quot;绝对路径和相对路径&quot;">​</a></h1><p><strong>网页中的</strong> URL 主要分为两大类：相对路径与绝对路径</p><h2 id="绝对路径" tabindex="-1">绝对路径 <a class="header-anchor" href="#绝对路径" aria-label="Permalink to &quot;绝对路径&quot;">​</a></h2><p>绝对路径可靠性强，而且相对容易理解，在项目中运用较多</p><table><thead><tr><th>形式</th><th>特点</th></tr></thead><tbody><tr><td>完整形式：<code>http://atguigu.com/web</code></td><td>直接向目标资源发送请求，容易理解。网站的外链会用到此形式</td></tr><tr><td>省略协议：<code>//atguigu.com/web</code></td><td>与当前页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多</td></tr><tr><td>省略协议、域名、端口：<code>/web</code></td><td>与当前页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小 型网站</td></tr></tbody></table><blockquote><p>第三种路径用得比较多，因为网站的主机名、域名和IP都可能会更换，如果使用完整形式，则更新后每个引用的资源路径都必须改，很麻烦。而使用第三种路径则不用改。</p><p>再者，在webpack项目中，模板文件如果引入了外部样式，就需要使用第三种路径，因为打包后代码运行的环境会发生变化，如果使用相对路径引入，就会报错。</p></blockquote><h2 id="相对路径" tabindex="-1">相对路径 <a class="header-anchor" href="#相对路径" aria-label="Permalink to &quot;相对路径&quot;">​</a></h2><p>相对路径在发送请求时，需要与当前页面 URL 路径进行 计算 ，得到完整 URL 后，再发送请求，学习阶 段用的较多</p><p>例如当前网页 url 为 <code>http://www.atguigu.com/course/h5.html</code></p><table><thead><tr><th>形式</th><th>最终的 URL</th></tr></thead><tbody><tr><td>/css/app.css</td><td><code>http://www.atguigu.com/course/css/app.css</code></td></tr><tr><td>js/app.js</td><td><code>http://www.atguigu.com/course/js/app.js</code></td></tr><tr><td>../img/logo.png</td><td><code>http://www.atguigu.com/img/logo.png</code></td></tr><tr><td>../../mp4/show.mp4</td><td><code>http://www.atguigu.com/mp4/show.mp4</code></td></tr></tbody></table><blockquote><p>形式一和形式二表示当前文件夹下的路径，形式三表示上一级目录，形式四表示上上级目录，因为上一级目录已经是最外层了，所以上上级目录是无效的，最外层就是根目录，效果和形式三是一样的</p></blockquote><p>正式情况下，在项目中，相对路径不常用，因为它不可靠，因为相对路径参考当前页面URL，当相对路径不正常时，获ss取资源就会出问题。比如前端路由。</p><h2 id="网页中使用-url-的场景小结" tabindex="-1">网页中使用 URL 的场景小结 <a class="header-anchor" href="#网页中使用-url-的场景小结" aria-label="Permalink to &quot;网页中使用 URL 的场景小结&quot;">​</a></h2><p>包括但不限于如下场景：</p><ul><li>a 标签 href</li><li>link 标签 href</li><li>script 标签 src</li><li>img 标签 src</li><li>video audio 标签 src</li><li>form 中的 action</li><li>AJAX 请求中的 URL</li></ul><p>网页使用路径既可以使用相对路径，也可以使用绝对路径</p>',16),c=[r];function p(i,l,s,h,n,u){return e(),o("div",null,c)}const g=t(d,[["render",p]]);export{m as __pageData,g as default};
